"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datepicker/dist/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-datepicker/dist/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! date-fns/isDate */ \"(ssr)/./node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/isValid */ \"(ssr)/./node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/_lib/format/longFormatters.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! date-fns/addMinutes */ \"(ssr)/./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! date-fns/addHours */ \"(ssr)/./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! date-fns/addWeeks */ \"(ssr)/./node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns/addQuarters */ \"(ssr)/./node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! date-fns/addYears */ \"(ssr)/./node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! date-fns/subDays */ \"(ssr)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! date-fns/subWeeks */ \"(ssr)/./node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns/subMonths */ \"(ssr)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns/subQuarters */ \"(ssr)/./node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns/subYears */ \"(ssr)/./node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns/getMinutes */ \"(ssr)/./node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns/getHours */ \"(ssr)/./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! date-fns/getDay */ \"(ssr)/./node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! date-fns/getDate */ \"(ssr)/./node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/getISOWeek */ \"(ssr)/./node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/getMonth */ \"(ssr)/./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns/getQuarter */ \"(ssr)/./node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns/getYear */ \"(ssr)/./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! date-fns/getTime */ \"(ssr)/./node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/setSeconds */ \"(ssr)/./node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/setMinutes */ \"(ssr)/./node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/setHours */ \"(ssr)/./node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns/setMonth */ \"(ssr)/./node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns/setQuarter */ \"(ssr)/./node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns/setYear */ \"(ssr)/./node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var date_fns_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/min.mjs\");\n/* harmony import */ var date_fns_max__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/max.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! date-fns/differenceInCalendarYears */ \"(ssr)/./node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns/differenceInCalendarQuarters */ \"(ssr)/./node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns/startOfQuarter */ \"(ssr)/./node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns/startOfYear */ \"(ssr)/./node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns/endOfYear */ \"(ssr)/./node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns/isEqual */ \"(ssr)/./node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/./node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns/isSameYear */ \"(ssr)/./node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns/isSameQuarter */ \"(ssr)/./node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/toDate */ \"(ssr)/./node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var date_fns_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/parse */ \"(ssr)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/parseISO */ \"(ssr)/./node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-onclickoutside */ \"(ssr)/./node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var date_fns_set__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! date-fns/set */ \"(ssr)/./node_modules/date-fns/set.mjs\");\n/*!\n  react-datepicker v6.9.0\n  https://github.com/Hacker0x01/react-datepicker\n  Released under the MIT License.\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\n// ** Date Constructors **\n\nfunction newDate(value) {\n  var d = value ? typeof value === \"string\" || value instanceof String ? (0,date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__.parseISO)(value) : (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(value) : new Date();\n  return isValid(d) ? d : null;\n}\nfunction parseDate(value, dateFormat, locale, strictParsing, minDate) {\n  var parsedDate = null;\n  var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\n  var strictParsingValueMatch = true;\n  if (Array.isArray(dateFormat)) {\n    dateFormat.forEach(function (df) {\n      var tryParseDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, df, new Date(), {\n        locale: localeObject,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n      });\n      if (strictParsing) {\n        strictParsingValueMatch = isValid(tryParseDate, minDate) && value === formatDate(tryParseDate, df, locale);\n      }\n      if (isValid(tryParseDate, minDate) && strictParsingValueMatch) {\n        parsedDate = tryParseDate;\n      }\n    });\n    return parsedDate;\n  }\n  parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat, new Date(), {\n    locale: localeObject,\n    useAdditionalWeekYearTokens: true,\n    useAdditionalDayOfYearTokens: true\n  });\n  if (strictParsing) {\n    strictParsingValueMatch = isValid(parsedDate) && value === formatDate(parsedDate, dateFormat, locale);\n  } else if (!isValid(parsedDate)) {\n    dateFormat = dateFormat.match(longFormattingTokensRegExp).map(function (substring) {\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        var longFormatter = date_fns_format__WEBPACK_IMPORTED_MODULE_7__.longFormatters[firstCharacter];\n        return localeObject ? longFormatter(substring, localeObject.formatLong) : firstCharacter;\n      }\n      return substring;\n    }).join(\"\");\n    if (value.length > 0) {\n      parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat.slice(0, value.length), new Date(), {\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n      });\n    }\n    if (!isValid(parsedDate)) {\n      parsedDate = new Date(value);\n    }\n  }\n  return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;\n}\nfunction isValid(date, minDate) {\n  minDate = minDate ? minDate : new Date(\"1/1/1000\");\n  return (0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date) && !(0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, minDate);\n}\n\n// ** Date Formatting **\n\nfunction formatDate(date, formatStr, locale) {\n  if (locale === \"en\") {\n    return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n      useAdditionalWeekYearTokens: true,\n      useAdditionalDayOfYearTokens: true\n    });\n  }\n  var localeObj = getLocaleObject(locale);\n  if (locale && !localeObj) {\n    console.warn(\"A locale object was not found for the provided string [\\\"\".concat(locale, \"\\\"].\"));\n  }\n  if (!localeObj && !!getDefaultLocale() && !!getLocaleObject(getDefaultLocale())) {\n    localeObj = getLocaleObject(getDefaultLocale());\n  }\n  return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n    locale: localeObj ? localeObj : null,\n    useAdditionalWeekYearTokens: true,\n    useAdditionalDayOfYearTokens: true\n  });\n}\nfunction safeDateFormat(date, _ref) {\n  var dateFormat = _ref.dateFormat,\n    locale = _ref.locale;\n  return date && formatDate(date, Array.isArray(dateFormat) ? dateFormat[0] : dateFormat, locale) || \"\";\n}\nfunction safeDateRangeFormat(startDate, endDate, props) {\n  if (!startDate) {\n    return \"\";\n  }\n  var formattedStartDate = safeDateFormat(startDate, props);\n  var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\n  return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}\nfunction safeMultipleDatesFormat(dates, props) {\n  if (!(dates !== null && dates !== void 0 && dates.length)) {\n    return \"\";\n  }\n  var formattedFirstDate = safeDateFormat(dates[0], props);\n  if (dates.length === 1) {\n    return formattedFirstDate;\n  }\n  if (dates.length === 2) {\n    var formattedSecondDate = safeDateFormat(dates[1], props);\n    return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\n  }\n  var extraDatesCount = dates.length - 1;\n  return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\n}\n\n// ** Date Setters **\n\nfunction setTime(date, _ref2) {\n  var _ref2$hour = _ref2.hour,\n    hour = _ref2$hour === void 0 ? 0 : _ref2$hour,\n    _ref2$minute = _ref2.minute,\n    minute = _ref2$minute === void 0 ? 0 : _ref2$minute,\n    _ref2$second = _ref2.second,\n    second = _ref2$second === void 0 ? 0 : _ref2$second;\n  return (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)((0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(date, second), minute), hour);\n}\nfunction getWeek(date, locale) {\n  var localeObj = locale && getLocaleObject(locale) || getDefaultLocale() && getLocaleObject(getDefaultLocale());\n  return (0,date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__.getISOWeek)(date, localeObj ? {\n    locale: localeObj\n  } : null);\n}\nfunction getDayOfWeekCode(day, locale) {\n  return formatDate(day, \"ddd\", locale);\n}\n\n// *** Start of ***\n\nfunction getStartOfDay(date) {\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n}\nfunction getStartOfWeek(date, locale, calendarStartDay) {\n  var localeObj = locale ? getLocaleObject(locale) : getLocaleObject(getDefaultLocale());\n  return (0,date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__.startOfWeek)(date, {\n    locale: localeObj,\n    weekStartsOn: calendarStartDay\n  });\n}\nfunction getStartOfMonth(date) {\n  return (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(date);\n}\nfunction getStartOfYear(date) {\n  return (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n}\nfunction getStartOfQuarter(date) {\n  return (0,date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__.startOfQuarter)(date);\n}\nfunction getStartOfToday() {\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(newDate());\n}\n\n// *** End of ***\n\nfunction getEndOfWeek(date) {\n  return (0,date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__.endOfWeek)(date);\n}\nfunction isSameYear(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__.isSameYear)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameMonth(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__.isSameMonth)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameQuarter(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__.isSameQuarter)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameDay(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__.isSameDay)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isEqual(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__.isEqual)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isDayInRange(day, startDate, endDate) {\n  var valid;\n  var start = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(startDate);\n  var end = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(endDate);\n  try {\n    valid = (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  } catch (err) {\n    valid = false;\n  }\n  return valid;\n}\n\n// ** Date Localization **\n\nfunction registerLocale(localeName, localeData) {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  if (!scope.__localeData__) {\n    scope.__localeData__ = {};\n  }\n  scope.__localeData__[localeName] = localeData;\n}\nfunction setDefaultLocale(localeName) {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  scope.__localeId__ = localeName;\n}\nfunction getDefaultLocale() {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  return scope.__localeId__;\n}\nfunction getLocaleObject(localeSpec) {\n  if (typeof localeSpec === \"string\") {\n    // Treat it as a locale name registered by registerLocale\n    var scope = typeof window !== \"undefined\" ? window : globalThis;\n    return scope.__localeData__ ? scope.__localeData__[localeSpec] : null;\n  } else {\n    // Treat it as a raw date-fns locale object\n    return localeSpec;\n  }\n}\nfunction getFormattedWeekdayInLocale(date, formatFunc, locale) {\n  return formatFunc(formatDate(date, \"EEEE\", locale));\n}\nfunction getWeekdayMinInLocale(date, locale) {\n  return formatDate(date, \"EEEEEE\", locale);\n}\nfunction getWeekdayShortInLocale(date, locale) {\n  return formatDate(date, \"EEE\", locale);\n}\nfunction getMonthInLocale(month, locale) {\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLLL\", locale);\n}\nfunction getMonthShortInLocale(month, locale) {\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLL\", locale);\n}\nfunction getQuarterShortInLocale(quarter, locale) {\n  return formatDate((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\n}\n\n// ** Utils for some components **\n\nfunction isDayDisabled(day) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref3.minDate,\n    maxDate = _ref3.maxDate,\n    excludeDates = _ref3.excludeDates,\n    excludeDateIntervals = _ref3.excludeDateIntervals,\n    includeDates = _ref3.includeDates,\n    includeDateIntervals = _ref3.includeDateIntervals,\n    filterDate = _ref3.filterDate;\n  return isOutOfBounds(day, {\n    minDate: minDate,\n    maxDate: maxDate\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n  }) || excludeDateIntervals && excludeDateIntervals.some(function (_ref4) {\n    var start = _ref4.start,\n      end = _ref4.end;\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameDay(day, includeDate);\n  }) || includeDateIntervals && !includeDateIntervals.some(function (_ref5) {\n    var start = _ref5.start,\n      end = _ref5.end;\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  }) || filterDate && !filterDate(newDate(day)) || false;\n}\nfunction isDayExcluded(day) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    excludeDates = _ref6.excludeDates,\n    excludeDateIntervals = _ref6.excludeDateIntervals;\n  if (excludeDateIntervals && excludeDateIntervals.length > 0) {\n    return excludeDateIntervals.some(function (_ref7) {\n      var start = _ref7.start,\n        end = _ref7.end;\n      return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n        start: start,\n        end: end\n      });\n    });\n  }\n  return excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n  }) || false;\n}\nfunction isMonthDisabled(month) {\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref8.minDate,\n    maxDate = _ref8.maxDate,\n    excludeDates = _ref8.excludeDates,\n    includeDates = _ref8.includeDates,\n    filterDate = _ref8.filterDate;\n  return isOutOfBounds(month, {\n    minDate: (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(minDate),\n    maxDate: (0,date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__.endOfMonth)(maxDate)\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameMonth(month, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameMonth(month, includeDate);\n  }) || filterDate && !filterDate(newDate(month)) || false;\n}\nfunction isMonthInRange(startDate, endDate, m, day) {\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n  var startDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(startDate);\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n  var endDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(endDate);\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\n    return startDateMonth <= m && m <= endDateMonth;\n  } else if (startDateYear < endDateYear) {\n    return dayYear === startDateYear && startDateMonth <= m || dayYear === endDateYear && endDateMonth >= m || dayYear < endDateYear && dayYear > startDateYear;\n  }\n}\nfunction isQuarterDisabled(quarter) {\n  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref9.minDate,\n    maxDate = _ref9.maxDate,\n    excludeDates = _ref9.excludeDates,\n    includeDates = _ref9.includeDates,\n    filterDate = _ref9.filterDate;\n  return isOutOfBounds(quarter, {\n    minDate: minDate,\n    maxDate: maxDate\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameQuarter(quarter, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameQuarter(quarter, includeDate);\n  }) || filterDate && !filterDate(newDate(quarter)) || false;\n}\n\n/**\n * @param {number} year\n * @param {Date} start\n * @param {Date} end\n * @returns {boolean}\n */\nfunction isYearInRange(year, start, end) {\n  if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(start) || !(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(end)) return false;\n  var startYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(start);\n  var endYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(end);\n  return startYear <= year && endYear >= year;\n}\nfunction isYearDisabled(year) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref10.minDate,\n    maxDate = _ref10.maxDate,\n    excludeDates = _ref10.excludeDates,\n    includeDates = _ref10.includeDates,\n    filterDate = _ref10.filterDate;\n  var date = new Date(year, 0, 1);\n  return isOutOfBounds(date, {\n    minDate: (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(minDate),\n    maxDate: (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(maxDate)\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameYear(date, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameYear(date, includeDate);\n  }) || filterDate && !filterDate(newDate(date)) || false;\n}\nfunction isQuarterInRange(startDate, endDate, q, day) {\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n  var startDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(startDate);\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n  var endDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(endDate);\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\n    return startDateQuarter <= q && q <= endDateQuarter;\n  } else if (startDateYear < endDateYear) {\n    return dayYear === startDateYear && startDateQuarter <= q || dayYear === endDateYear && endDateQuarter >= q || dayYear < endDateYear && dayYear > startDateYear;\n  }\n}\nfunction isOutOfBounds(day) {\n  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref11.minDate,\n    maxDate = _ref11.maxDate;\n  return minDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, minDate) < 0 || maxDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, maxDate) > 0;\n}\nfunction isTimeInList(time, times) {\n  return times.some(function (listTime) {\n    return (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(listTime) === (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) && (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(listTime) === (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) && (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(listTime) === (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time);\n  });\n}\nfunction isTimeDisabled(time) {\n  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    excludeTimes = _ref12.excludeTimes,\n    includeTimes = _ref12.includeTimes,\n    filterTime = _ref12.filterTime;\n  return excludeTimes && isTimeInList(time, excludeTimes) || includeTimes && !isTimeInList(time, includeTimes) || filterTime && !filterTime(time) || false;\n}\nfunction isTimeInDisabledRange(time, _ref13) {\n  var minTime = _ref13.minTime,\n    maxTime = _ref13.maxTime;\n  if (!minTime || !maxTime) {\n    throw new Error(\"Both minTime and maxTime props required\");\n  }\n  var baseTime = newDate();\n  baseTime = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(baseTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time));\n  baseTime = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(baseTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time));\n  baseTime = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(baseTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time));\n  var min = newDate();\n  min = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(min, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(minTime));\n  min = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(min, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(minTime));\n  min = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(min, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(minTime));\n  var max = newDate();\n  max = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(max, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(maxTime));\n  max = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(max, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(maxTime));\n  max = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(max, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(maxTime));\n  var valid;\n  try {\n    valid = !(0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(baseTime, {\n      start: min,\n      end: max\n    });\n  } catch (err) {\n    valid = false;\n  }\n  return valid;\n}\nfunction monthDisabledBefore(day) {\n  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref14.minDate,\n    includeDates = _ref14.includeDates;\n  var previousMonth = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(day, 1);\n  return minDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(minDate, previousMonth) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\n  }) || false;\n}\nfunction monthDisabledAfter(day) {\n  var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref15.maxDate,\n    includeDates = _ref15.includeDates;\n  var nextMonth = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(day, 1);\n  return maxDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, includeDate) > 0;\n  }) || false;\n}\nfunction quarterDisabledBefore(date) {\n  var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref16.minDate,\n    includeDates = _ref16.includeDates;\n  var firstDateOfYear = (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n  var previousQuarter = (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(firstDateOfYear, 1);\n  return minDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\n  }) || false;\n}\nfunction quarterDisabledAfter(date) {\n  var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref17.maxDate,\n    includeDates = _ref17.includeDates;\n  var lastDateOfYear = (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(date);\n  var nextQuarter = (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(lastDateOfYear, 1);\n  return maxDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\n  }) || false;\n}\nfunction yearDisabledBefore(day) {\n  var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref18.minDate,\n    includeDates = _ref18.includeDates;\n  var previousYear = (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, 1);\n  return minDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(minDate, previousYear) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(includeDate, previousYear) > 0;\n  }) || false;\n}\nfunction yearsDisabledBefore(day) {\n  var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref19.minDate,\n    _ref19$yearItemNumber = _ref19.yearItemNumber,\n    yearItemNumber = _ref19$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref19$yearItemNumber;\n  var previousYear = getStartOfYear((0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, yearItemNumber));\n  var _getYearsPeriod = getYearsPeriod(previousYear, yearItemNumber),\n    endPeriod = _getYearsPeriod.endPeriod;\n  var minDateYear = minDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate);\n  return minDateYear && minDateYear > endPeriod || false;\n}\nfunction yearDisabledAfter(day) {\n  var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref20.maxDate,\n    includeDates = _ref20.includeDates;\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, 1);\n  return maxDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, includeDate) > 0;\n  }) || false;\n}\nfunction yearsDisabledAfter(day) {\n  var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref21.maxDate,\n    _ref21$yearItemNumber = _ref21.yearItemNumber,\n    yearItemNumber = _ref21$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref21$yearItemNumber;\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, yearItemNumber);\n  var _getYearsPeriod2 = getYearsPeriod(nextYear, yearItemNumber),\n    startPeriod = _getYearsPeriod2.startPeriod;\n  var maxDateYear = maxDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate);\n  return maxDateYear && maxDateYear < startPeriod || false;\n}\nfunction getEffectiveMinDate(_ref22) {\n  var minDate = _ref22.minDate,\n    includeDates = _ref22.includeDates;\n  if (includeDates && minDate) {\n    var minDates = includeDates.filter(function (includeDate) {\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, minDate) >= 0;\n    });\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(minDates);\n  } else if (includeDates) {\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(includeDates);\n  } else {\n    return minDate;\n  }\n}\nfunction getEffectiveMaxDate(_ref23) {\n  var maxDate = _ref23.maxDate,\n    includeDates = _ref23.includeDates;\n  if (includeDates && maxDate) {\n    var maxDates = includeDates.filter(function (includeDate) {\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, maxDate) <= 0;\n    });\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(maxDates);\n  } else if (includeDates) {\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(includeDates);\n  } else {\n    return maxDate;\n  }\n}\nfunction getHightLightDaysMap() {\n  var highlightDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--highlighted\";\n  var dateClasses = new Map();\n  for (var i = 0, len = highlightDates.length; i < len; i++) {\n    var obj = highlightDates[i];\n    if ((0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(obj)) {\n      var key = formatDate(obj, \"MM.dd.yyyy\");\n      var classNamesArr = dateClasses.get(key) || [];\n      if (!classNamesArr.includes(defaultClassName)) {\n        classNamesArr.push(defaultClassName);\n        dateClasses.set(key, classNamesArr);\n      }\n    } else if (_typeof(obj) === \"object\") {\n      var keys = Object.keys(obj);\n      var className = keys[0];\n      var arrOfDates = obj[keys[0]];\n      if (typeof className === \"string\" && arrOfDates.constructor === Array) {\n        for (var k = 0, _len = arrOfDates.length; k < _len; k++) {\n          var _key = formatDate(arrOfDates[k], \"MM.dd.yyyy\");\n          var _classNamesArr = dateClasses.get(_key) || [];\n          if (!_classNamesArr.includes(className)) {\n            _classNamesArr.push(className);\n            dateClasses.set(_key, _classNamesArr);\n          }\n        }\n      }\n    }\n  }\n  return dateClasses;\n}\n\n/**\n * Compare the two arrays\n * @param {Array} array1\n * @param {Array} array2\n * @returns {Boolean} true, if the passed array are equal, false otherwise\n */\nfunction arraysAreEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  return array1.every(function (value, index) {\n    return value === array2[index];\n  });\n}\n\n/**\n * Assign the custom class to each date\n * @param {Array} holidayDates array of object containing date and name of the holiday\n * @param {string} classname to be added.\n * @returns {Map} Map containing date as key and array of classname and holiday name as value\n */\nfunction getHolidaysMap() {\n  var holidayDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--holidays\";\n  var dateClasses = new Map();\n  holidayDates.forEach(function (holiday) {\n    var dateObj = holiday.date,\n      holidayName = holiday.holidayName;\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateObj)) {\n      return;\n    }\n    var key = formatDate(dateObj, \"MM.dd.yyyy\");\n    var classNamesObj = dateClasses.get(key) || {};\n    if (\"className\" in classNamesObj && classNamesObj[\"className\"] === defaultClassName && arraysAreEqual(classNamesObj[\"holidayNames\"], [holidayName])) {\n      return;\n    }\n    classNamesObj[\"className\"] = defaultClassName;\n    var holidayNameArr = classNamesObj[\"holidayNames\"];\n    classNamesObj[\"holidayNames\"] = holidayNameArr ? [].concat(_toConsumableArray(holidayNameArr), [holidayName]) : [holidayName];\n    dateClasses.set(key, classNamesObj);\n  });\n  return dateClasses;\n}\nfunction timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\n  var l = injectedTimes.length;\n  var times = [];\n  for (var i = 0; i < l; i++) {\n    var injectedTime = startOfDay;\n    injectedTime = (0,date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__.addHours)(injectedTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(injectedTimes[i]));\n    injectedTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(injectedTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(injectedTimes[i]));\n    injectedTime = (0,date_fns__WEBPACK_IMPORTED_MODULE_53__.addSeconds)(injectedTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(injectedTimes[i]));\n    var nextTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\n    if ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(injectedTime, currentTime) && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(injectedTime, nextTime)) {\n      times.push(injectedTimes[i]);\n    }\n  }\n  return times;\n}\nfunction addZero(i) {\n  return i < 10 ? \"0\".concat(i) : \"\".concat(i);\n}\nfunction getYearsPeriod(date) {\n  var yearItemNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_YEAR_ITEM_NUMBER;\n  var endPeriod = Math.ceil((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date) / yearItemNumber) * yearItemNumber;\n  var startPeriod = endPeriod - (yearItemNumber - 1);\n  return {\n    startPeriod: startPeriod,\n    endPeriod: endPeriod\n  };\n}\nfunction getHoursInDay(d) {\n  var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n  var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\n  return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\n}\n\n/**\n * Returns the start of the minute for the given date\n *\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\n * do not make changes unless you know what you're doing\n *\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\n * for more details\n *\n * @param {Date} d date\n * @returns {Date} start of the minute\n */\nfunction startOfMinute(d) {\n  var seconds = d.getSeconds();\n  var milliseconds = d.getMilliseconds();\n  return (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\n}\n\n/**\n * Returns whether the given dates are in the same minute\n *\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\n *\n * @param {Date} d1\n * @param {Date} d2\n * @returns {boolean}\n */\nfunction isSameMinute(d1, d2) {\n  return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\n}\n\n/**\n * Returns a cloned date with midnight time (00:00:00)\n *\n * @param {Date} date The date for which midnight time is required\n * @param {Date} dateToCompare the date to compare with\n * @returns {Date} A new datetime object representing the input date with midnight time\n */\nfunction getMidnightDate(date) {\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date)) {\n    throw new Error(\"Invalid date\");\n  }\n  var dateWithoutTime = new Date(date);\n  dateWithoutTime.setHours(0, 0, 0, 0);\n  return dateWithoutTime;\n}\n\n/**\n * Is the first date before the second one?\n *\n * @param {Date} date The date that should be before the other one to return true\n * @param {Date} dateToCompare The date to compare with\n * @returns {boolean} The first date is before the second date\n *\n * Note:\n *  This function considers the mid-night of the given dates for comparison.\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\n */\nfunction isDateBefore(date, dateToCompare) {\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date) || !(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateToCompare)) {\n    throw new Error(\"Invalid date received\");\n  }\n  var midnightDate = getMidnightDate(date);\n  var midnightDateToCompare = getMidnightDate(dateToCompare);\n  return (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(midnightDate, midnightDateToCompare);\n}\nfunction isSpaceKeyDown(event) {\n  var SPACE_KEY = \" \";\n  return event.key === SPACE_KEY;\n}\n\nfunction generateYears(year, noOfYear, minDate, maxDate) {\n  var list = [];\n  for (var i = 0; i < 2 * noOfYear + 1; i++) {\n    var newYear = year + noOfYear - i;\n    var isInRange = true;\n    if (minDate) {\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate) <= newYear;\n    }\n    if (maxDate && isInRange) {\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate) >= newYear;\n    }\n    if (isInRange) {\n      list.push(newYear);\n    }\n  }\n  return list;\n}\nvar YearDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function YearDropdownOptions(props) {\n    var _this;\n    _classCallCheck(this, YearDropdownOptions);\n    _this = _callSuper(this, YearDropdownOptions, [props]);\n    _defineProperty(_this, \"renderOptions\", function () {\n      var selectedYear = _this.props.year;\n      var options = _this.state.yearsList.map(function (year) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: selectedYear === year ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\n          key: year,\n          onClick: _this.onChange.bind(_this, year),\n          \"aria-selected\": selectedYear === year ? \"true\" : undefined\n        }, selectedYear === year ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__year-option--selected\"\n        }, \"\\u2713\") : \"\", year);\n      });\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : null;\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : null;\n      if (!maxYear || !_this.state.yearsList.find(function (year) {\n        return year === maxYear;\n      })) {\n        options.unshift( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year-option\",\n          key: \"upcoming\",\n          onClick: _this.incrementYears\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\n        })));\n      }\n      if (!minYear || !_this.state.yearsList.find(function (year) {\n        return year === minYear;\n      })) {\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year-option\",\n          key: \"previous\",\n          onClick: _this.decrementYears\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\n        })));\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onChange\", function (year) {\n      _this.props.onChange(year);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      _this.props.onCancel();\n    });\n    _defineProperty(_this, \"shiftYears\", function (amount) {\n      var years = _this.state.yearsList.map(function (year) {\n        return year + amount;\n      });\n      _this.setState({\n        yearsList: years\n      });\n    });\n    _defineProperty(_this, \"incrementYears\", function () {\n      return _this.shiftYears(1);\n    });\n    _defineProperty(_this, \"decrementYears\", function () {\n      return _this.shiftYears(-1);\n    });\n    var yearDropdownItemNumber = props.yearDropdownItemNumber,\n      scrollableYearDropdown = props.scrollableYearDropdown;\n    var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\n    _this.state = {\n      yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate)\n    };\n    _this.dropdownRef = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    return _this;\n  }\n  _inherits(YearDropdownOptions, _React$Component);\n  return _createClass(YearDropdownOptions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var dropdownCurrent = this.dropdownRef.current;\n      if (dropdownCurrent) {\n        // Get array from HTMLCollection\n        var dropdownCurrentChildren = dropdownCurrent.children ? Array.from(dropdownCurrent.children) : null;\n        var selectedYearOptionEl = dropdownCurrentChildren ? dropdownCurrentChildren.find(function (childEl) {\n          return childEl.ariaSelected;\n        }) : null;\n        dropdownCurrent.scrollTop = selectedYearOptionEl ? selectedYearOptionEl.offsetTop + (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) / 2 : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n        \"react-datepicker__year-dropdown\": true,\n        \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: dropdownClass,\n        ref: this.dropdownRef\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(YearDropdownOptions);\nvar YearDropdown = /*#__PURE__*/function (_React$Component) {\n  function YearDropdown() {\n    var _this;\n    _classCallCheck(this, YearDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, YearDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function () {\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : 1900;\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : 2100;\n      var options = [];\n      for (var i = minYear; i <= maxYear; i++) {\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: i,\n          value: i\n        }, i));\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onSelectChange\", function (e) {\n      _this.onChange(e.target.value);\n    });\n    _defineProperty(_this, \"renderSelectMode\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: _this.props.year,\n        className: \"react-datepicker__year-select\",\n        onChange: _this.onSelectChange\n      }, _this.renderSelectOptions());\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__year-read-view\",\n        onClick: function onClick(event) {\n          return _this.toggleDropdown(event);\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__year-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__year-read-view--selected-year\"\n      }, _this.props.year));\n    });\n    _defineProperty(_this, \"renderDropdown\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedYearDropdownOptions, {\n        key: \"dropdown\",\n        year: _this.props.year,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function () {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown());\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (year) {\n      _this.toggleDropdown();\n      if (year === _this.props.year) return;\n      _this.props.onChange(year);\n    });\n    _defineProperty(_this, \"toggleDropdown\", function (event) {\n      _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      }, function () {\n        if (_this.props.adjustDateOnChange) {\n          _this.handleYearChange(_this.props.date, event);\n        }\n      });\n    });\n    _defineProperty(_this, \"handleYearChange\", function (date, event) {\n      _this.onSelect(date, event);\n      _this.setOpen();\n    });\n    _defineProperty(_this, \"onSelect\", function (date, event) {\n      if (_this.props.onSelect) {\n        _this.props.onSelect(date, event);\n      }\n    });\n    _defineProperty(_this, \"setOpen\", function () {\n      if (_this.props.setOpen) {\n        _this.props.setOpen(true);\n      }\n    });\n    return _this;\n  }\n  _inherits(YearDropdown, _React$Component);\n  return _createClass(YearDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode();\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode();\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar MonthDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function MonthDropdownOptions() {\n    var _this;\n    _classCallCheck(this, MonthDropdownOptions);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthDropdownOptions, [].concat(args));\n    _defineProperty(_this, \"isSelectedMonth\", function (i) {\n      return _this.props.month === i;\n    });\n    _defineProperty(_this, \"renderOptions\", function () {\n      return _this.props.monthNames.map(function (month, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: _this.isSelectedMonth(i) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\n          key: month,\n          onClick: _this.onChange.bind(_this, i),\n          \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined\n        }, _this.isSelectedMonth(i) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__month-option--selected\"\n        }, \"\\u2713\") : \"\", month);\n      });\n    });\n    _defineProperty(_this, \"onChange\", function (month) {\n      return _this.props.onChange(month);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      return _this.props.onCancel();\n    });\n    return _this;\n  }\n  _inherits(MonthDropdownOptions, _React$Component);\n  return _createClass(MonthDropdownOptions, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-dropdown\"\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedMonthDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthDropdownOptions);\nvar MonthDropdown = /*#__PURE__*/function (_React$Component) {\n  function MonthDropdown() {\n    var _this;\n    _classCallCheck(this, MonthDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function (monthNames) {\n      return monthNames.map(function (M, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: i,\n          value: i\n        }, M);\n      });\n    });\n    _defineProperty(_this, \"renderSelectMode\", function (monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: _this.props.month,\n        className: \"react-datepicker__month-select\",\n        onChange: function onChange(e) {\n          return _this.onChange(e.target.value);\n        }\n      }, _this.renderSelectOptions(monthNames));\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible, monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__month-read-view\",\n        onClick: _this.toggleDropdown\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-read-view--selected-month\"\n      }, monthNames[_this.props.month]));\n    });\n    _defineProperty(_this, \"renderDropdown\", function (monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthDropdownOptions, {\n        key: \"dropdown\",\n        month: _this.props.month,\n        monthNames: monthNames,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function (monthNames) {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible, monthNames)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown(monthNames));\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (month) {\n      _this.toggleDropdown();\n      if (month !== _this.props.month) {\n        _this.props.onChange(month);\n      }\n    });\n    _defineProperty(_this, \"toggleDropdown\", function () {\n      return _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      });\n    });\n    return _this;\n  }\n  _inherits(MonthDropdown, _React$Component);\n  return _createClass(MonthDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var monthNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function (M) {\n        return getMonthShortInLocale(M, _this2.props.locale);\n      } : function (M) {\n        return getMonthInLocale(M, _this2.props.locale);\n      });\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode(monthNames);\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode(monthNames);\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction generateMonthYears(minDate, maxDate) {\n  var list = [];\n  var currDate = getStartOfMonth(minDate);\n  var lastDate = getStartOfMonth(maxDate);\n  while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n    list.push(newDate(currDate));\n    currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n  }\n  return list;\n}\nvar MonthYearDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function MonthYearDropdownOptions(props) {\n    var _this;\n    _classCallCheck(this, MonthYearDropdownOptions);\n    _this = _callSuper(this, MonthYearDropdownOptions, [props]);\n    _defineProperty(_this, \"renderOptions\", function () {\n      return _this.state.monthYearsList.map(function (monthYear) {\n        var monthYearPoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(monthYear);\n        var isSameMonthYear = isSameYear(_this.props.date, monthYear) && isSameMonth(_this.props.date, monthYear);\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: isSameMonthYear ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\n          key: monthYearPoint,\n          onClick: _this.onChange.bind(_this, monthYearPoint),\n          \"aria-selected\": isSameMonthYear ? \"true\" : undefined\n        }, isSameMonthYear ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__month-year-option--selected\"\n        }, \"\\u2713\") : \"\", formatDate(monthYear, _this.props.dateFormat, _this.props.locale));\n      });\n    });\n    _defineProperty(_this, \"onChange\", function (monthYear) {\n      return _this.props.onChange(monthYear);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      _this.props.onCancel();\n    });\n    _this.state = {\n      monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate)\n    };\n    return _this;\n  }\n  _inherits(MonthYearDropdownOptions, _React$Component);\n  return _createClass(MonthYearDropdownOptions, [{\n    key: \"render\",\n    value: function render() {\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n        \"react-datepicker__month-year-dropdown\": true,\n        \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: dropdownClass\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedMonthYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthYearDropdownOptions);\nvar MonthYearDropdown = /*#__PURE__*/function (_React$Component) {\n  function MonthYearDropdown() {\n    var _this;\n    _classCallCheck(this, MonthYearDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthYearDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function () {\n      var currDate = getStartOfMonth(_this.props.minDate);\n      var lastDate = getStartOfMonth(_this.props.maxDate);\n      var options = [];\n      while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n        var timePoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(currDate);\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: timePoint,\n          value: timePoint\n        }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\n        currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onSelectChange\", function (e) {\n      _this.onChange(e.target.value);\n    });\n    _defineProperty(_this, \"renderSelectMode\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(getStartOfMonth(_this.props.date)),\n        className: \"react-datepicker__month-year-select\",\n        onChange: _this.onSelectChange\n      }, _this.renderSelectOptions());\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible) {\n      var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__month-year-read-view\",\n        onClick: function onClick(event) {\n          return _this.toggleDropdown(event);\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-year-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-year-read-view--selected-month-year\"\n      }, yearMonth));\n    });\n    _defineProperty(_this, \"renderDropdown\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthYearDropdownOptions, {\n        key: \"dropdown\",\n        date: _this.props.date,\n        dateFormat: _this.props.dateFormat,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n        locale: _this.props.locale\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function () {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown());\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (monthYearPoint) {\n      _this.toggleDropdown();\n      var changedDate = newDate(parseInt(monthYearPoint));\n      if (isSameYear(_this.props.date, changedDate) && isSameMonth(_this.props.date, changedDate)) {\n        return;\n      }\n      _this.props.onChange(changedDate);\n    });\n    _defineProperty(_this, \"toggleDropdown\", function () {\n      return _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      });\n    });\n    return _this;\n  }\n  _inherits(MonthYearDropdown, _React$Component);\n  return _createClass(MonthYearDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode();\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode();\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Day = /*#__PURE__*/function (_React$Component) {\n  function Day() {\n    var _this;\n    _classCallCheck(this, Day);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Day, [].concat(args));\n    _defineProperty(_this, \"dayEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n    _defineProperty(_this, \"handleClick\", function (event) {\n      if (!_this.isDisabled() && _this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    });\n    _defineProperty(_this, \"handleMouseEnter\", function (event) {\n      if (!_this.isDisabled() && _this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event);\n      }\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"isSameDay\", function (other) {\n      return isSameDay(_this.props.day, other);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      var _this$props$selectedD;\n      if (_this.props.disabledKeyboardNavigation) {\n        return false;\n      }\n      var isSelectedDate = _this.props.selectsMultiple ? (_this$props$selectedD = _this.props.selectedDates) === null || _this$props$selectedD === void 0 ? void 0 : _this$props$selectedD.some(function (date) {\n        return _this.isSameDayOrWeek(date);\n      }) : _this.isSameDayOrWeek(_this.props.selected);\n      return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection);\n    });\n    _defineProperty(_this, \"isDisabled\", function () {\n      return isDayDisabled(_this.props.day, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function () {\n      return isDayExcluded(_this.props.day, _this.props);\n    });\n    _defineProperty(_this, \"isStartOfWeek\", function () {\n      return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n    });\n    _defineProperty(_this, \"isSameWeek\", function (other) {\n      return _this.props.showWeekPicker && isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n    });\n    _defineProperty(_this, \"isSameDayOrWeek\", function (other) {\n      return _this.isSameDay(other) || _this.isSameWeek(other);\n    });\n    _defineProperty(_this, \"getHighLightedClass\", function () {\n      var _this$props = _this.props,\n        day = _this$props.day,\n        highlightDates = _this$props.highlightDates;\n      if (!highlightDates) {\n        return false;\n      }\n\n      // Looking for className in the Map of {'day string, 'className'}\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\n      return highlightDates.get(dayStr);\n    });\n    // Function to return the array containing classname associated to the date\n    _defineProperty(_this, \"getHolidaysClass\", function () {\n      var _this$props2 = _this.props,\n        day = _this$props2.day,\n        holidays = _this$props2.holidays;\n      if (!holidays) {\n        return false;\n      }\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\n      // Looking for className in the Map of {day string: {className, holidayName}}\n      if (holidays.has(dayStr)) {\n        return [holidays.get(dayStr).className];\n      }\n    });\n    _defineProperty(_this, \"isInRange\", function () {\n      var _this$props3 = _this.props,\n        day = _this$props3.day,\n        startDate = _this$props3.startDate,\n        endDate = _this$props3.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isDayInRange(day, startDate, endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRange\", function () {\n      var _this$props$selecting;\n      var _this$props4 = _this.props,\n        day = _this$props4.day,\n        selectsStart = _this$props4.selectsStart,\n        selectsEnd = _this$props4.selectsEnd,\n        selectsRange = _this$props4.selectsRange,\n        selectsDisabledDaysInRange = _this$props4.selectsDisabledDaysInRange,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate;\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate || !selectsDisabledDaysInRange && _this.isDisabled()) {\n        return false;\n      }\n      if (selectsStart && endDate && ((0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\n        return isDayInRange(day, selectingDate, endDate);\n      }\n      if (selectsEnd && startDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n        return isDayInRange(day, startDate, selectingDate);\n      }\n      if (selectsRange && startDate && !endDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n        return isDayInRange(day, startDate, selectingDate);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingRangeStart\", function () {\n      var _this$props$selecting2;\n      if (!_this.isInSelectingRange()) {\n        return false;\n      }\n      var _this$props5 = _this.props,\n        day = _this$props5.day,\n        startDate = _this$props5.startDate,\n        selectsStart = _this$props5.selectsStart;\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n      if (selectsStart) {\n        return isSameDay(day, selectingDate);\n      } else {\n        return isSameDay(day, startDate);\n      }\n    });\n    _defineProperty(_this, \"isSelectingRangeEnd\", function () {\n      var _this$props$selecting3;\n      if (!_this.isInSelectingRange()) {\n        return false;\n      }\n      var _this$props6 = _this.props,\n        day = _this$props6.day,\n        endDate = _this$props6.endDate,\n        selectsEnd = _this$props6.selectsEnd,\n        selectsRange = _this$props6.selectsRange;\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n      if (selectsEnd || selectsRange) {\n        return isSameDay(day, selectingDate);\n      } else {\n        return isSameDay(day, endDate);\n      }\n    });\n    _defineProperty(_this, \"isRangeStart\", function () {\n      var _this$props7 = _this.props,\n        day = _this$props7.day,\n        startDate = _this$props7.startDate,\n        endDate = _this$props7.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameDay(startDate, day);\n    });\n    _defineProperty(_this, \"isRangeEnd\", function () {\n      var _this$props8 = _this.props,\n        day = _this$props8.day,\n        startDate = _this$props8.startDate,\n        endDate = _this$props8.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameDay(endDate, day);\n    });\n    _defineProperty(_this, \"isWeekend\", function () {\n      var weekday = (0,date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__.getDay)(_this.props.day);\n      return weekday === 0 || weekday === 6;\n    });\n    _defineProperty(_this, \"isAfterMonth\", function () {\n      return _this.props.month !== undefined && (_this.props.month + 1) % 12 === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day);\n    });\n    _defineProperty(_this, \"isBeforeMonth\", function () {\n      return _this.props.month !== undefined && ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month;\n    });\n    _defineProperty(_this, \"isCurrentDay\", function () {\n      return _this.isSameDay(newDate());\n    });\n    _defineProperty(_this, \"isSelected\", function () {\n      if (_this.props.selectsMultiple) {\n        var _this$props$selectedD2;\n        return (_this$props$selectedD2 = _this.props.selectedDates) === null || _this$props$selectedD2 === void 0 ? void 0 : _this$props$selectedD2.some(function (date) {\n          return _this.isSameDayOrWeek(date);\n        });\n      }\n      return _this.isSameDayOrWeek(_this.props.selected);\n    });\n    _defineProperty(_this, \"getClassNames\", function (date) {\n      var dayClassName = _this.props.dayClassName ? _this.props.dayClassName(date) : undefined;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\n        \"react-datepicker__day--disabled\": _this.isDisabled(),\n        \"react-datepicker__day--excluded\": _this.isExcluded(),\n        \"react-datepicker__day--selected\": _this.isSelected(),\n        \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\n        \"react-datepicker__day--range-start\": _this.isRangeStart(),\n        \"react-datepicker__day--range-end\": _this.isRangeEnd(),\n        \"react-datepicker__day--in-range\": _this.isInRange(),\n        \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\n        \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\n        \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\n        \"react-datepicker__day--today\": _this.isCurrentDay(),\n        \"react-datepicker__day--weekend\": _this.isWeekend(),\n        \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth()\n      }, _this.getHighLightedClass(\"react-datepicker__day--highlighted\"), _this.getHolidaysClass());\n    });\n    _defineProperty(_this, \"getAriaLabel\", function () {\n      var _this$props9 = _this.props,\n        day = _this$props9.day,\n        _this$props9$ariaLabe = _this$props9.ariaLabelPrefixWhenEnabled,\n        ariaLabelPrefixWhenEnabled = _this$props9$ariaLabe === void 0 ? \"Choose\" : _this$props9$ariaLabe,\n        _this$props9$ariaLabe2 = _this$props9.ariaLabelPrefixWhenDisabled,\n        ariaLabelPrefixWhenDisabled = _this$props9$ariaLabe2 === void 0 ? \"Not available\" : _this$props9$ariaLabe2;\n      var prefix = _this.isDisabled() || _this.isExcluded() ? ariaLabelPrefixWhenDisabled : ariaLabelPrefixWhenEnabled;\n      return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\n    });\n    // A function to return the holiday's name as title's content\n    _defineProperty(_this, \"getTitle\", function () {\n      var _this$props10 = _this.props,\n        day = _this$props10.day,\n        _this$props10$holiday = _this$props10.holidays,\n        holidays = _this$props10$holiday === void 0 ? new Map() : _this$props10$holiday,\n        excludeDates = _this$props10.excludeDates;\n      var compareDt = formatDate(day, \"MM.dd.yyyy\");\n      var titles = [];\n      if (holidays.has(compareDt)) {\n        titles.push.apply(titles, _toConsumableArray(holidays.get(compareDt).holidayNames));\n      }\n      if (_this.isExcluded()) {\n        titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function (excludeDate) {\n          return isSameDay(excludeDate.date ? excludeDate.date : excludeDate, day);\n        }).map(function (excludeDate) {\n          return excludeDate.message;\n        }));\n      }\n      return titles.join(\", \");\n    });\n    _defineProperty(_this, \"getTabIndex\", function (selected, preSelection) {\n      var selectedDay = selected || _this.props.selected;\n      var preSelectionDay = preSelection || _this.props.preSelection;\n      var tabIndex = !(_this.props.showWeekPicker && (_this.props.showWeekNumber || !_this.isStartOfWeek())) && (_this.isKeyboardSelected() || _this.isSameDay(selectedDay) && isSameDay(preSelectionDay, selectedDay)) ? 0 : -1;\n      return tabIndex;\n    });\n    // various cases when we need to apply focus to the preselected day\n    // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n    _defineProperty(_this, \"handleFocusDay\", function () {\n      var _this$dayEl$current;\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var shouldFocusDay = false;\n      // only do this while the input isn't focused\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && _this.isSameDay(_this.props.preSelection)) {\n        // there is currently no activeElement and not inline\n        if (!document.activeElement || document.activeElement === document.body) {\n          shouldFocusDay = true;\n        }\n        // inline version:\n        // do not focus on initial render to prevent autoFocus issue\n        // focus after month has changed via keyboard\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n          shouldFocusDay = false;\n        }\n        // the activeElement is in the container, and it is another instance of Day\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains(\"react-datepicker__day\")) {\n          shouldFocusDay = true;\n        }\n        //day is one of the non rendered duplicate days\n        if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) {\n          shouldFocusDay = false;\n        }\n        if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) {\n          shouldFocusDay = false;\n        }\n      }\n      shouldFocusDay && ((_this$dayEl$current = _this.dayEl.current) === null || _this$dayEl$current === void 0 ? void 0 : _this$dayEl$current.focus({\n        preventScroll: true\n      }));\n    });\n    _defineProperty(_this, \"renderDayContents\", function () {\n      if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) return null;\n      if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) return null;\n      return _this.props.renderDayContents ? _this.props.renderDayContents((0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day), _this.props.day) : (0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day);\n    });\n    _defineProperty(_this, \"render\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: _this.dayEl,\n        className: _this.getClassNames(_this.props.day),\n        onKeyDown: _this.handleOnKeyDown,\n        onClick: _this.handleClick,\n        onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n        onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n        tabIndex: _this.getTabIndex(),\n        \"aria-label\": _this.getAriaLabel(),\n        role: \"option\",\n        title: _this.getTitle(),\n        \"aria-disabled\": _this.isDisabled(),\n        \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined,\n        \"aria-selected\": _this.isSelected() || _this.isInRange()\n      }, _this.renderDayContents(), _this.getTitle() !== \"\" && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"overlay\"\n      }, _this.getTitle()));\n    });\n    return _this;\n  }\n  _inherits(Day, _React$Component);\n  return _createClass(Day, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleFocusDay();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.handleFocusDay(prevProps);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WeekNumber = /*#__PURE__*/function (_React$Component) {\n  function WeekNumber() {\n    var _this;\n    _classCallCheck(this, WeekNumber);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, WeekNumber, [].concat(args));\n    _defineProperty(_this, \"weekNumberEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n    _defineProperty(_this, \"handleClick\", function (event) {\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.date, _this.props.preSelection);\n    });\n    _defineProperty(_this, \"getTabIndex\", function () {\n      return _this.props.showWeekPicker && _this.props.showWeekNumber && (_this.isKeyboardSelected() || isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.preSelection, _this.props.selected)) ? 0 : -1;\n    });\n    // various cases when we need to apply focus to the preselected week-number\n    // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n    _defineProperty(_this, \"handleFocusWeekNumber\", function () {\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var shouldFocusWeekNumber = false;\n      // only do this while the input isn't focused\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && isSameDay(_this.props.date, _this.props.preSelection)) {\n        // there is currently no activeElement and not inline\n        if (!document.activeElement || document.activeElement === document.body) {\n          shouldFocusWeekNumber = true;\n        }\n        // inline version:\n        // do not focus on initial render to prevent autoFocus issue\n        // focus after month has changed via keyboard\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n          shouldFocusWeekNumber = false;\n        }\n        // the activeElement is in the container, and it is another instance of WeekNumber\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\n          shouldFocusWeekNumber = true;\n        }\n      }\n      shouldFocusWeekNumber && _this.weekNumberEl.current && _this.weekNumberEl.current.focus({\n        preventScroll: true\n      });\n    });\n    return _this;\n  }\n  _inherits(WeekNumber, _React$Component);\n  return _createClass(WeekNumber, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleFocusWeekNumber();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.handleFocusWeekNumber(prevProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        weekNumber = _this$props.weekNumber,\n        _this$props$ariaLabel = _this$props.ariaLabelPrefix,\n        ariaLabelPrefix = _this$props$ariaLabel === void 0 ? \"week \" : _this$props$ariaLabel,\n        onClick = _this$props.onClick;\n      var weekNumberClasses = {\n        \"react-datepicker__week-number\": true,\n        \"react-datepicker__week-number--clickable\": !!onClick,\n        \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected),\n        \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected()\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: this.weekNumberEl,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses),\n        \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber),\n        onClick: this.handleClick,\n        onKeyDown: this.handleOnKeyDown,\n        tabIndex: this.getTabIndex()\n      }, weekNumber);\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        ariaLabelPrefix: \"week \"\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Week = /*#__PURE__*/function (_React$Component) {\n  function Week() {\n    var _this;\n    _classCallCheck(this, Week);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Week, [].concat(args));\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event);\n      }\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      if (_this.props.onDayMouseEnter) {\n        _this.props.onDayMouseEnter(day);\n      }\n    });\n    _defineProperty(_this, \"handleWeekClick\", function (day, weekNumber, event) {\n      if (typeof _this.props.onWeekSelect === \"function\") {\n        _this.props.onWeekSelect(day, weekNumber, event);\n      }\n      if (_this.props.showWeekPicker) {\n        _this.handleDayClick(day, event);\n      }\n      if (_this.props.shouldCloseOnSelect) {\n        _this.props.setOpen(false);\n      }\n    });\n    _defineProperty(_this, \"formatWeekNumber\", function (date) {\n      if (_this.props.formatWeekNumber) {\n        return _this.props.formatWeekNumber(date);\n      }\n      return getWeek(date);\n    });\n    _defineProperty(_this, \"renderDays\", function () {\n      var startOfWeek = _this.startOfWeek();\n      var days = [];\n      var weekNumber = _this.formatWeekNumber(startOfWeek);\n      if (_this.props.showWeekNumber) {\n        var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber) : undefined;\n        days.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WeekNumber, {\n          key: \"W\",\n          weekNumber: weekNumber,\n          date: startOfWeek,\n          onClick: onClickAction,\n          selected: _this.props.selected,\n          preSelection: _this.props.preSelection,\n          ariaLabelPrefix: _this.props.ariaLabelPrefix,\n          showWeekPicker: _this.props.showWeekPicker,\n          showWeekNumber: _this.props.showWeekNumber,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef\n        }));\n      }\n      return days.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Day, {\n          ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix,\n          ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix,\n          key: day.valueOf(),\n          day: day,\n          month: _this.props.month,\n          onClick: _this.handleDayClick.bind(_this, day),\n          usePointerEvent: _this.props.usePointerEvent,\n          onMouseEnter: _this.handleDayMouseEnter.bind(_this, day),\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          calendarStartDay: _this.props.calendarStartDay,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.props.selectingDate,\n          filterDate: _this.props.filterDate,\n          preSelection: _this.props.preSelection,\n          selected: _this.props.selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          showWeekPicker: _this.props.showWeekPicker,\n          showWeekNumber: _this.props.showWeekNumber,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          dayClassName: _this.props.dayClassName,\n          renderDayContents: _this.props.renderDayContents,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart,\n          locale: _this.props.locale\n        });\n      }));\n    });\n    _defineProperty(_this, \"startOfWeek\", function () {\n      return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.startOfWeek(), _this.props.selected) && isSameDay(_this.startOfWeek(), _this.props.preSelection);\n    });\n    return _this;\n  }\n  _inherits(Week, _React$Component);\n  return _createClass(Week, [{\n    key: \"render\",\n    value: function render() {\n      var weekNumberClasses = {\n        \"react-datepicker__week\": true,\n        \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\n        \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses)\n      }, this.renderDays());\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        shouldCloseOnSelect: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\nvar MONTH_COLUMNS_LAYOUT = {\n  TWO_COLUMNS: \"two_columns\",\n  THREE_COLUMNS: \"three_columns\",\n  FOUR_COLUMNS: \"four_columns\"\n};\nvar MONTH_COLUMNS = _defineProperty(_defineProperty(_defineProperty({}, MONTH_COLUMNS_LAYOUT.TWO_COLUMNS, {\n  grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]],\n  verticalNavigationOffset: 2\n}), MONTH_COLUMNS_LAYOUT.THREE_COLUMNS, {\n  grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]],\n  verticalNavigationOffset: 3\n}), MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS, {\n  grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],\n  verticalNavigationOffset: 4\n});\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\n  if (showFourColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\n  if (showTwoColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\n  return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\n}\nvar Month = /*#__PURE__*/function (_React$Component) {\n  function Month() {\n    var _this;\n    _classCallCheck(this, Month);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Month, [].concat(args));\n    _defineProperty(_this, \"MONTH_REFS\", _toConsumableArray(Array(12)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"QUARTER_REFS\", _toConsumableArray(Array(4)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"isDisabled\", function (date) {\n      return isDayDisabled(date, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function (date) {\n      return isDayExcluded(date, _this.props);\n    });\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event, _this.props.orderInDisplay);\n      }\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      if (_this.props.onDayMouseEnter) {\n        _this.props.onDayMouseEnter(day);\n      }\n    });\n    _defineProperty(_this, \"handleMouseLeave\", function () {\n      if (_this.props.onMouseLeave) {\n        _this.props.onMouseLeave();\n      }\n    });\n    _defineProperty(_this, \"isRangeStartMonth\", function (m) {\n      var _this$props = _this.props,\n        day = _this$props.day,\n        startDate = _this$props.startDate,\n        endDate = _this$props.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), startDate);\n    });\n    _defineProperty(_this, \"isRangeStartQuarter\", function (q) {\n      var _this$props2 = _this.props,\n        day = _this$props2.day,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), startDate);\n    });\n    _defineProperty(_this, \"isRangeEndMonth\", function (m) {\n      var _this$props3 = _this.props,\n        day = _this$props3.day,\n        startDate = _this$props3.startDate,\n        endDate = _this$props3.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), endDate);\n    });\n    _defineProperty(_this, \"isRangeEndQuarter\", function (q) {\n      var _this$props4 = _this.props,\n        day = _this$props4.day,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRangeMonth\", function (m) {\n      var _this$props$selecting;\n      var _this$props5 = _this.props,\n        day = _this$props5.day,\n        selectsStart = _this$props5.selectsStart,\n        selectsEnd = _this$props5.selectsEnd,\n        selectsRange = _this$props5.selectsRange,\n        startDate = _this$props5.startDate,\n        endDate = _this$props5.endDate;\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isMonthInRange(selectingDate, endDate, m, day);\n      }\n      if (selectsEnd && startDate) {\n        return isMonthInRange(startDate, selectingDate, m, day);\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isMonthInRange(startDate, selectingDate, m, day);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingMonthRangeStart\", function (m) {\n      var _this$props$selecting2;\n      if (!_this.isInSelectingRangeMonth(m)) {\n        return false;\n      }\n      var _this$props6 = _this.props,\n        day = _this$props6.day,\n        startDate = _this$props6.startDate,\n        selectsStart = _this$props6.selectsStart;\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n      if (selectsStart) {\n        return isSameMonth(_month, selectingDate);\n      } else {\n        return isSameMonth(_month, startDate);\n      }\n    });\n    _defineProperty(_this, \"isSelectingMonthRangeEnd\", function (m) {\n      var _this$props$selecting3;\n      if (!_this.isInSelectingRangeMonth(m)) {\n        return false;\n      }\n      var _this$props7 = _this.props,\n        day = _this$props7.day,\n        endDate = _this$props7.endDate,\n        selectsEnd = _this$props7.selectsEnd,\n        selectsRange = _this$props7.selectsRange;\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n      if (selectsEnd || selectsRange) {\n        return isSameMonth(_month, selectingDate);\n      } else {\n        return isSameMonth(_month, endDate);\n      }\n    });\n    _defineProperty(_this, \"isInSelectingRangeQuarter\", function (q) {\n      var _this$props$selecting4;\n      var _this$props8 = _this.props,\n        day = _this$props8.day,\n        selectsStart = _this$props8.selectsStart,\n        selectsEnd = _this$props8.selectsEnd,\n        selectsRange = _this$props8.selectsRange,\n        startDate = _this$props8.startDate,\n        endDate = _this$props8.endDate;\n      var selectingDate = (_this$props$selecting4 = _this.props.selectingDate) !== null && _this$props$selecting4 !== void 0 ? _this$props$selecting4 : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isQuarterInRange(selectingDate, endDate, q, day);\n      }\n      if (selectsEnd && startDate) {\n        return isQuarterInRange(startDate, selectingDate, q, day);\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isQuarterInRange(startDate, selectingDate, q, day);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isWeekInMonth\", function (startOfWeek) {\n      var day = _this.props.day;\n      var endOfWeek = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, 6);\n      return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\n    });\n    _defineProperty(_this, \"isCurrentMonth\", function (day, m) {\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && m === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newDate());\n    });\n    _defineProperty(_this, \"isCurrentQuarter\", function (day, q) {\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && q === (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(newDate());\n    });\n    _defineProperty(_this, \"isSelectedMonth\", function (day, m, selected) {\n      return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(selected) === m && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n    });\n    _defineProperty(_this, \"isSelectedQuarter\", function (day, q, selected) {\n      return (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(day) === q && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n    });\n    _defineProperty(_this, \"renderWeeks\", function () {\n      var weeks = [];\n      var isFixedHeight = _this.props.fixedHeight;\n      var i = 0;\n      var breakAfterNextPush = false;\n      var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\n      var selected = _this.props.showWeekPicker ? getStartOfWeek(_this.props.selected, _this.props.locale, _this.props.calendarStartDay) : _this.props.selected;\n      var preSelection = _this.props.showWeekPicker ? getStartOfWeek(_this.props.preSelection, _this.props.locale, _this.props.calendarStartDay) : _this.props.preSelection;\n      while (true) {\n        weeks.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Week, {\n          ariaLabelPrefix: _this.props.weekAriaLabelPrefix,\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n          key: i,\n          day: currentWeekStart,\n          month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day),\n          onDayClick: _this.handleDayClick,\n          usePointerEvent: _this.props.usePointerEvent,\n          onDayMouseEnter: _this.handleDayMouseEnter,\n          onWeekSelect: _this.props.onWeekSelect,\n          formatWeekNumber: _this.props.formatWeekNumber,\n          locale: _this.props.locale,\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.props.selectingDate,\n          filterDate: _this.props.filterDate,\n          preSelection: preSelection,\n          selected: selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          showWeekNumber: _this.props.showWeekNumbers,\n          showWeekPicker: _this.props.showWeekPicker,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          dayClassName: _this.props.dayClassName,\n          setOpen: _this.props.setOpen,\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          renderDayContents: _this.props.renderDayContents,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef,\n          calendarStartDay: _this.props.calendarStartDay,\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart\n        }));\n        if (breakAfterNextPush) break;\n        i++;\n        currentWeekStart = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(currentWeekStart, 1);\n\n        // If one of these conditions is true, we will either break on this week\n        // or break on the next week\n        var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\n        var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\n        if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\n          if (_this.props.peekNextMonth) {\n            breakAfterNextPush = true;\n          } else {\n            break;\n          }\n        }\n      }\n      return weeks;\n    });\n    _defineProperty(_this, \"onMonthClick\", function (e, m) {\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n      if (isMonthDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayClick(getStartOfMonth(labelDate), e);\n    });\n    _defineProperty(_this, \"onMonthMouseEnter\", function (m) {\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n      if (isMonthDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayMouseEnter(getStartOfMonth(labelDate));\n    });\n    _defineProperty(_this, \"handleMonthNavigation\", function (newMonth, newDate) {\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      _this.MONTH_REFS[newMonth].current && _this.MONTH_REFS[newMonth].current.focus();\n    });\n    _defineProperty(_this, \"onMonthKeyDown\", function (event, month) {\n      var _this$props9 = _this.props,\n        selected = _this$props9.selected,\n        preSelection = _this$props9.preSelection,\n        disabledKeyboardNavigation = _this$props9.disabledKeyboardNavigation,\n        showTwoColumnMonthYearPicker = _this$props9.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker = _this$props9.showFourColumnMonthYearPicker,\n        setPreSelection = _this$props9.setPreSelection,\n        handleOnMonthKeyDown = _this$props9.handleOnMonthKeyDown;\n      var eventKey = event.key;\n      if (eventKey !== \"Tab\") {\n        // preventDefault on tab event blocks focus change\n        event.preventDefault();\n      }\n      if (!disabledKeyboardNavigation) {\n        var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\n        var verticalOffset = MONTH_COLUMNS[monthColumnsLayout].verticalNavigationOffset;\n        var monthsGrid = MONTH_COLUMNS[monthColumnsLayout].grid;\n        switch (eventKey) {\n          case \"Enter\":\n            _this.onMonthClick(event, month);\n            setPreSelection(selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleMonthNavigation(month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n            break;\n          case \"ArrowLeft\":\n            _this.handleMonthNavigation(month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n            break;\n          case \"ArrowUp\":\n            _this.handleMonthNavigation(\n            // Check if month on the first row\n            monthsGrid[0].includes(month) ? month + 12 - verticalOffset : month - verticalOffset, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, verticalOffset));\n            break;\n          case \"ArrowDown\":\n            _this.handleMonthNavigation(\n            // Check if month on the last row\n            monthsGrid[monthsGrid.length - 1].includes(month) ? month - 12 + verticalOffset : month + verticalOffset, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, verticalOffset));\n            break;\n        }\n      }\n      handleOnMonthKeyDown && handleOnMonthKeyDown(event);\n    });\n    _defineProperty(_this, \"onQuarterClick\", function (e, q) {\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n      if (isQuarterDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayClick(getStartOfQuarter(labelDate), e);\n    });\n    _defineProperty(_this, \"onQuarterMouseEnter\", function (q) {\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n      if (isQuarterDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\n    });\n    _defineProperty(_this, \"handleQuarterNavigation\", function (newQuarter, newDate) {\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      _this.QUARTER_REFS[newQuarter - 1].current && _this.QUARTER_REFS[newQuarter - 1].current.focus();\n    });\n    _defineProperty(_this, \"onQuarterKeyDown\", function (event, quarter) {\n      var eventKey = event.key;\n      if (!_this.props.disabledKeyboardNavigation) {\n        switch (eventKey) {\n          case \"Enter\":\n            _this.onQuarterClick(event, quarter);\n            _this.props.setPreSelection(_this.props.selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowLeft\":\n            _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(_this.props.preSelection, 1));\n            break;\n        }\n      }\n    });\n    _defineProperty(_this, \"isMonthDisabled\", function (month) {\n      var _this$props10 = _this.props,\n        day = _this$props10.day,\n        minDate = _this$props10.minDate,\n        maxDate = _this$props10.maxDate,\n        excludeDates = _this$props10.excludeDates,\n        includeDates = _this$props10.includeDates;\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n      return (minDate || maxDate || excludeDates || includeDates) && isMonthDisabled(labelDate, _this.props);\n    });\n    _defineProperty(_this, \"getMonthClassNames\", function (m) {\n      var _this$props11 = _this.props,\n        day = _this$props11.day,\n        startDate = _this$props11.startDate,\n        endDate = _this$props11.endDate,\n        selected = _this$props11.selected,\n        preSelection = _this$props11.preSelection,\n        monthClassName = _this$props11.monthClassName;\n      var _monthClassName = monthClassName ? monthClassName((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m)) : undefined;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\n        \"react-datepicker__month-text--disabled\": _this.isMonthDisabled(m),\n        \"react-datepicker__month-text--selected\": _this.isSelectedMonth(day, m, selected),\n        \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation && _this.isSelectedMonth(day, m, preSelection),\n        \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\n        \"react-datepicker__month-text--in-range\": isMonthInRange(startDate, endDate, m, day),\n        \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\n        \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\n        \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\n        \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\n        \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m)\n      });\n    });\n    _defineProperty(_this, \"getTabIndex\", function (m) {\n      var preSelectedMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.preSelection);\n      var tabIndex = !_this.props.disabledKeyboardNavigation && m === preSelectedMonth ? \"0\" : \"-1\";\n      return tabIndex;\n    });\n    _defineProperty(_this, \"getQuarterTabIndex\", function (q) {\n      var preSelectedQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(_this.props.preSelection);\n      var tabIndex = !_this.props.disabledKeyboardNavigation && q === preSelectedQuarter ? \"0\" : \"-1\";\n      return tabIndex;\n    });\n    _defineProperty(_this, \"getAriaLabel\", function (month) {\n      var _this$props12 = _this.props,\n        _this$props12$chooseD = _this$props12.chooseDayAriaLabelPrefix,\n        chooseDayAriaLabelPrefix = _this$props12$chooseD === void 0 ? \"Choose\" : _this$props12$chooseD,\n        _this$props12$disable = _this$props12.disabledDayAriaLabelPrefix,\n        disabledDayAriaLabelPrefix = _this$props12$disable === void 0 ? \"Not available\" : _this$props12$disable,\n        day = _this$props12.day,\n        locale = _this$props12.locale;\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n      var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate) ? disabledDayAriaLabelPrefix : chooseDayAriaLabelPrefix;\n      return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\", locale));\n    });\n    _defineProperty(_this, \"getQuarterClassNames\", function (q) {\n      var _this$props13 = _this.props,\n        day = _this$props13.day,\n        startDate = _this$props13.startDate,\n        endDate = _this$props13.endDate,\n        selected = _this$props13.selected,\n        minDate = _this$props13.minDate,\n        maxDate = _this$props13.maxDate,\n        preSelection = _this$props13.preSelection,\n        disabledKeyboardNavigation = _this$props13.disabledKeyboardNavigation;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\n        \"react-datepicker__quarter-text--disabled\": (minDate || maxDate) && isQuarterDisabled((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), _this.props),\n        \"react-datepicker__quarter-text--selected\": _this.isSelectedQuarter(day, q, selected),\n        \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation && _this.isSelectedQuarter(day, q, preSelection),\n        \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\n        \"react-datepicker__quarter-text--in-range\": isQuarterInRange(startDate, endDate, q, day),\n        \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\n        \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q)\n      });\n    });\n    _defineProperty(_this, \"getMonthContent\", function (m) {\n      var _this$props14 = _this.props,\n        showFullMonthYearPicker = _this$props14.showFullMonthYearPicker,\n        renderMonthContent = _this$props14.renderMonthContent,\n        locale = _this$props14.locale,\n        day = _this$props14.day;\n      var shortMonthText = getMonthShortInLocale(m, locale);\n      var fullMonthText = getMonthInLocale(m, locale);\n      if (renderMonthContent) {\n        return renderMonthContent(m, shortMonthText, fullMonthText, day);\n      }\n      return showFullMonthYearPicker ? fullMonthText : shortMonthText;\n    });\n    _defineProperty(_this, \"getQuarterContent\", function (q) {\n      var _this$props15 = _this.props,\n        renderQuarterContent = _this$props15.renderQuarterContent,\n        locale = _this$props15.locale;\n      var shortQuarter = getQuarterShortInLocale(q, locale);\n      return renderQuarterContent ? renderQuarterContent(q, shortQuarter) : shortQuarter;\n    });\n    _defineProperty(_this, \"renderMonths\", function () {\n      var _this$props16 = _this.props,\n        showTwoColumnMonthYearPicker = _this$props16.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker = _this$props16.showFourColumnMonthYearPicker,\n        day = _this$props16.day,\n        selected = _this$props16.selected;\n      var monthColumns = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)].grid;\n      return monthColumns.map(function (month, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__month-wrapper\",\n          key: i\n        }, month.map(function (m, j) {\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            ref: _this.MONTH_REFS[m],\n            key: j,\n            onClick: function onClick(ev) {\n              _this.onMonthClick(ev, m);\n            },\n            onKeyDown: function onKeyDown(ev) {\n              if (isSpaceKeyDown(ev)) {\n                ev.preventDefault();\n                ev.key = \"Enter\";\n              }\n              _this.onMonthKeyDown(ev, m);\n            },\n            onMouseEnter: !_this.props.usePointerEvent ? function () {\n              return _this.onMonthMouseEnter(m);\n            } : undefined,\n            onPointerEnter: _this.props.usePointerEvent ? function () {\n              return _this.onMonthMouseEnter(m);\n            } : undefined,\n            tabIndex: _this.getTabIndex(m),\n            className: _this.getMonthClassNames(m),\n            \"aria-disabled\": _this.isMonthDisabled(m),\n            role: \"option\",\n            \"aria-label\": _this.getAriaLabel(m),\n            \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined,\n            \"aria-selected\": _this.isSelectedMonth(day, m, selected)\n          }, _this.getMonthContent(m));\n        }));\n      });\n    });\n    _defineProperty(_this, \"renderQuarters\", function () {\n      var _this$props17 = _this.props,\n        day = _this$props17.day,\n        selected = _this$props17.selected;\n      var quarters = [1, 2, 3, 4];\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__quarter-wrapper\"\n      }, quarters.map(function (q, j) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: j,\n          ref: _this.QUARTER_REFS[j],\n          role: \"option\",\n          onClick: function onClick(ev) {\n            _this.onQuarterClick(ev, q);\n          },\n          onKeyDown: function onKeyDown(ev) {\n            _this.onQuarterKeyDown(ev, q);\n          },\n          onMouseEnter: !_this.props.usePointerEvent ? function () {\n            return _this.onQuarterMouseEnter(q);\n          } : undefined,\n          onPointerEnter: _this.props.usePointerEvent ? function () {\n            return _this.onQuarterMouseEnter(q);\n          } : undefined,\n          className: _this.getQuarterClassNames(q),\n          \"aria-selected\": _this.isSelectedQuarter(day, q, selected),\n          tabIndex: _this.getQuarterTabIndex(q),\n          \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined\n        }, _this.getQuarterContent(q));\n      }));\n    });\n    _defineProperty(_this, \"getClassNames\", function () {\n      var _this$props18 = _this.props,\n        selectingDate = _this$props18.selectingDate,\n        selectsStart = _this$props18.selectsStart,\n        selectsEnd = _this$props18.selectsEnd,\n        showMonthYearPicker = _this$props18.showMonthYearPicker,\n        showQuarterYearPicker = _this$props18.showQuarterYearPicker,\n        showWeekPicker = _this$props18.showWeekPicker;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month\", {\n        \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd)\n      }, {\n        \"react-datepicker__monthPicker\": showMonthYearPicker\n      }, {\n        \"react-datepicker__quarterPicker\": showQuarterYearPicker\n      }, {\n        \"react-datepicker__weekPicker\": showWeekPicker\n      });\n    });\n    return _this;\n  }\n  _inherits(Month, _React$Component);\n  return _createClass(Month, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props19 = this.props,\n        showMonthYearPicker = _this$props19.showMonthYearPicker,\n        showQuarterYearPicker = _this$props19.showQuarterYearPicker,\n        day = _this$props19.day,\n        _this$props19$ariaLab = _this$props19.ariaLabelPrefix,\n        ariaLabelPrefix = _this$props19$ariaLab === void 0 ? \"Month \" : _this$props19$ariaLab;\n      var formattedAriaLabelPrefix = ariaLabelPrefix ? ariaLabelPrefix.trim() + \" \" : \"\";\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: this.getClassNames(),\n        onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n        onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n        \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\", this.props.locale)),\n        role: \"listbox\"\n      }, showMonthYearPicker ? this.renderMonths() : showQuarterYearPicker ? this.renderQuarters() : this.renderWeeks());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Time = /*#__PURE__*/function (_React$Component) {\n  function Time() {\n    var _this;\n    _classCallCheck(this, Time);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Time, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      height: null\n    });\n    _defineProperty(_this, \"scrollToTheSelectedTime\", function () {\n      requestAnimationFrame(function () {\n        if (!_this.list) return;\n        _this.list.scrollTop = _this.centerLi && Time.calcCenterPosition(_this.props.monthRef ? _this.props.monthRef.clientHeight - _this.header.clientHeight : _this.list.clientHeight, _this.centerLi);\n      });\n    });\n    _defineProperty(_this, \"handleClick\", function (time) {\n      if ((_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props)) {\n        return;\n      }\n      _this.props.onChange(time);\n    });\n    _defineProperty(_this, \"isSelectedTime\", function (time) {\n      return _this.props.selected && isSameMinute(_this.props.selected, time);\n    });\n    _defineProperty(_this, \"isDisabledTime\", function (time) {\n      return (_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props);\n    });\n    _defineProperty(_this, \"liClasses\", function (time) {\n      var classes = [\"react-datepicker__time-list-item\", _this.props.timeClassName ? _this.props.timeClassName(time) : undefined];\n      if (_this.isSelectedTime(time)) {\n        classes.push(\"react-datepicker__time-list-item--selected\");\n      }\n      if (_this.isDisabledTime(time)) {\n        classes.push(\"react-datepicker__time-list-item--disabled\");\n      }\n\n      //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\n      if (_this.props.injectTimes && ((0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) * 3600 + (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) * 60 + (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time)) % (_this.props.intervals * 60) !== 0) {\n        classes.push(\"react-datepicker__time-list-item--injected\");\n      }\n      return classes.join(\" \");\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event, time) {\n      if (event.key === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      if ((event.key === \"ArrowUp\" || event.key === \"ArrowLeft\") && event.target.previousSibling) {\n        event.preventDefault();\n        event.target.previousSibling.focus();\n      }\n      if ((event.key === \"ArrowDown\" || event.key === \"ArrowRight\") && event.target.nextSibling) {\n        event.preventDefault();\n        event.target.nextSibling.focus();\n      }\n      if (event.key === \"Enter\") {\n        _this.handleClick(time);\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"renderTimes\", function () {\n      var times = [];\n      var format = _this.props.format ? _this.props.format : \"p\";\n      var intervals = _this.props.intervals;\n      var activeDate = _this.props.selected || _this.props.openToDate || newDate();\n      var base = getStartOfDay(activeDate);\n      var sortedInjectTimes = _this.props.injectTimes && _this.props.injectTimes.sort(function (a, b) {\n        return a - b;\n      });\n      var minutesInDay = 60 * getHoursInDay(activeDate);\n      var multiplier = minutesInDay / intervals;\n      for (var i = 0; i < multiplier; i++) {\n        var currentTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(base, i * intervals);\n        times.push(currentTime);\n        if (sortedInjectTimes) {\n          var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\n          times = times.concat(timesToInject);\n        }\n      }\n\n      // Determine which time to focus and scroll into view when component mounts\n      var timeToFocus = times.reduce(function (prev, time) {\n        if (time.getTime() <= activeDate.getTime()) {\n          return time;\n        }\n        return prev;\n      }, times[0]);\n      return times.map(function (time, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n          key: i,\n          onClick: _this.handleClick.bind(_this, time),\n          className: _this.liClasses(time),\n          ref: function ref(li) {\n            if (time === timeToFocus) {\n              _this.centerLi = li;\n            }\n          },\n          onKeyDown: function onKeyDown(ev) {\n            _this.handleOnKeyDown(ev, time);\n          },\n          tabIndex: time === timeToFocus ? 0 : -1,\n          role: \"option\",\n          \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined,\n          \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined\n        }, formatDate(time, format, _this.props.locale));\n      });\n    });\n    return _this;\n  }\n  _inherits(Time, _React$Component);\n  return _createClass(Time, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // code to ensure selected time will always be in focus within time window when it first appears\n      this.scrollToTheSelectedTime();\n      if (this.props.monthRef && this.header) {\n        this.setState({\n          height: this.props.monthRef.clientHeight - this.header.clientHeight\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var height = this.state.height;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time-container \".concat(this.props.todayButton ? \"react-datepicker__time-container--with-today-button\" : \"\")\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\n        ref: function ref(header) {\n          _this2.header = header;\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__header\"\n      }, this.props.timeCaption)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time-box\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", {\n        className: \"react-datepicker__time-list\",\n        ref: function ref(list) {\n          _this2.list = list;\n        },\n        style: height ? {\n          height: height\n        } : {},\n        role: \"listbox\",\n        \"aria-label\": this.props.timeCaption\n      }, this.renderTimes()))));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        intervals: 30,\n        onTimeChange: function onTimeChange() {},\n        todayButton: null,\n        timeCaption: \"Time\"\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n_defineProperty(Time, \"calcCenterPosition\", function (listHeight, centerLiRef) {\n  return centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2);\n});\n\nvar VERTICAL_NAVIGATION_OFFSET = 3;\nvar Year = /*#__PURE__*/function (_React$Component) {\n  function Year(props) {\n    var _this;\n    _classCallCheck(this, Year);\n    _this = _callSuper(this, Year, [props]);\n    _defineProperty(_this, \"YEAR_REFS\", _toConsumableArray(Array(_this.props.yearItemNumber)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"isDisabled\", function (date) {\n      return isDayDisabled(date, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function (date) {\n      return isDayExcluded(date, _this.props);\n    });\n    _defineProperty(_this, \"selectingDate\", function () {\n      var _this$props$selecting;\n      return (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n    });\n    _defineProperty(_this, \"updateFocusOnPaginate\", function (refIndex) {\n      var waitForReRender = function () {\n        this.YEAR_REFS[refIndex].current.focus();\n      }.bind(_this);\n      window.requestAnimationFrame(waitForReRender);\n    });\n    _defineProperty(_this, \"handleYearClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event);\n      }\n    });\n    _defineProperty(_this, \"handleYearNavigation\", function (newYear, newDate) {\n      var _this$props = _this.props,\n        date = _this$props.date,\n        yearItemNumber = _this$props.yearItemNumber;\n      var _utils$getYearsPeriod = getYearsPeriod(date, yearItemNumber),\n        startPeriod = _utils$getYearsPeriod.startPeriod;\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      if (newYear - startPeriod < 0) {\n        _this.updateFocusOnPaginate(yearItemNumber - (startPeriod - newYear));\n      } else if (newYear - startPeriod >= yearItemNumber) {\n        _this.updateFocusOnPaginate(Math.abs(yearItemNumber - (newYear - startPeriod)));\n      } else _this.YEAR_REFS[newYear - startPeriod].current.focus();\n    });\n    _defineProperty(_this, \"isSameDay\", function (y, other) {\n      return isSameDay(y, other);\n    });\n    _defineProperty(_this, \"isCurrentYear\", function (y) {\n      return y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate());\n    });\n    _defineProperty(_this, \"isRangeStart\", function (y) {\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.startDate);\n    });\n    _defineProperty(_this, \"isRangeEnd\", function (y) {\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.endDate);\n    });\n    _defineProperty(_this, \"isInRange\", function (y) {\n      return isYearInRange(y, _this.props.startDate, _this.props.endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRange\", function (y) {\n      var _this$props2 = _this.props,\n        selectsStart = _this$props2.selectsStart,\n        selectsEnd = _this$props2.selectsEnd,\n        selectsRange = _this$props2.selectsRange,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate;\n      if (!(selectsStart || selectsEnd || selectsRange) || !_this.selectingDate()) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isYearInRange(y, _this.selectingDate(), endDate);\n      }\n      if (selectsEnd && startDate) {\n        return isYearInRange(y, startDate, _this.selectingDate());\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isYearInRange(y, startDate, _this.selectingDate());\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingRangeStart\", function (y) {\n      if (!_this.isInSelectingRange(y)) {\n        return false;\n      }\n      var _this$props3 = _this.props,\n        startDate = _this$props3.startDate,\n        selectsStart = _this$props3.selectsStart;\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n      if (selectsStart) {\n        return isSameYear(_year, _this.selectingDate());\n      }\n      return isSameYear(_year, startDate);\n    });\n    _defineProperty(_this, \"isSelectingRangeEnd\", function (y) {\n      if (!_this.isInSelectingRange(y)) {\n        return false;\n      }\n      var _this$props4 = _this.props,\n        endDate = _this$props4.endDate,\n        selectsEnd = _this$props4.selectsEnd,\n        selectsRange = _this$props4.selectsRange;\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n      if (selectsEnd || selectsRange) {\n        return isSameYear(_year, _this.selectingDate());\n      }\n      return isSameYear(_year, endDate);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function (y) {\n      var date = getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(_this.props.date, y));\n      return !_this.props.disabledKeyboardNavigation && !_this.props.inline && !isSameDay(date, getStartOfYear(_this.props.selected)) && isSameDay(date, getStartOfYear(_this.props.preSelection));\n    });\n    _defineProperty(_this, \"onYearClick\", function (e, y) {\n      var date = _this.props.date;\n      _this.handleYearClick(getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)), e);\n    });\n    _defineProperty(_this, \"onYearKeyDown\", function (e, y) {\n      var key = e.key;\n      var _this$props5 = _this.props,\n        date = _this$props5.date,\n        yearItemNumber = _this$props5.yearItemNumber,\n        handleOnKeyDown = _this$props5.handleOnKeyDown;\n      if (key !== \"Tab\") {\n        // preventDefault on tab event blocks focus change\n        e.preventDefault();\n      }\n      if (!_this.props.disabledKeyboardNavigation) {\n        switch (key) {\n          case \"Enter\":\n            _this.onYearClick(e, y);\n            _this.props.setPreSelection(_this.props.selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleYearNavigation(y + 1, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowLeft\":\n            _this.handleYearNavigation(y - 1, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowUp\":\n            {\n              var _utils$getYearsPeriod2 = getYearsPeriod(date, yearItemNumber),\n                startPeriod = _utils$getYearsPeriod2.startPeriod;\n              var offset = VERTICAL_NAVIGATION_OFFSET;\n              var newYear = y - offset;\n              if (newYear < startPeriod) {\n                var leftOverOffset = yearItemNumber % offset;\n                if (y >= startPeriod && y < startPeriod + leftOverOffset) {\n                  offset = leftOverOffset;\n                } else {\n                  offset += leftOverOffset;\n                }\n                newYear = y - offset;\n              }\n              _this.handleYearNavigation(newYear, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, offset));\n              break;\n            }\n          case \"ArrowDown\":\n            {\n              var _utils$getYearsPeriod3 = getYearsPeriod(date, yearItemNumber),\n                endPeriod = _utils$getYearsPeriod3.endPeriod;\n              var _offset = VERTICAL_NAVIGATION_OFFSET;\n              var _newYear = y + _offset;\n              if (_newYear > endPeriod) {\n                var _leftOverOffset = yearItemNumber % _offset;\n                if (y <= endPeriod && y > endPeriod - _leftOverOffset) {\n                  _offset = _leftOverOffset;\n                } else {\n                  _offset += _leftOverOffset;\n                }\n                _newYear = y + _offset;\n              }\n              _this.handleYearNavigation(_newYear, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, _offset));\n              break;\n            }\n        }\n      }\n      handleOnKeyDown && handleOnKeyDown(e);\n    });\n    _defineProperty(_this, \"getYearClassNames\", function (y) {\n      var _this$props6 = _this.props,\n        date = _this$props6.date,\n        minDate = _this$props6.minDate,\n        maxDate = _this$props6.maxDate,\n        selected = _this$props6.selected,\n        excludeDates = _this$props6.excludeDates,\n        includeDates = _this$props6.includeDates,\n        filterDate = _this$props6.filterDate,\n        yearClassName = _this$props6.yearClassName;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), yearClassName ? yearClassName((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)) : undefined, {\n        \"react-datepicker__year-text--selected\": y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected),\n        \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props),\n        \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\n        \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\n        \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\n        \"react-datepicker__year-text--in-range\": _this.isInRange(y),\n        \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\n        \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\n        \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\n        \"react-datepicker__year-text--today\": _this.isCurrentYear(y)\n      });\n    });\n    _defineProperty(_this, \"getYearTabIndex\", function (y) {\n      if (_this.props.disabledKeyboardNavigation) return \"-1\";\n      var preSelected = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.preSelection);\n      return y === preSelected ? \"0\" : \"-1\";\n    });\n    _defineProperty(_this, \"getYearContainerClassNames\", function () {\n      var _this$props7 = _this.props,\n        selectingDate = _this$props7.selectingDate,\n        selectsStart = _this$props7.selectsStart,\n        selectsEnd = _this$props7.selectsEnd,\n        selectsRange = _this$props7.selectsRange;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year\", {\n        \"react-datepicker__year--selecting-range\": selectingDate && (selectsStart || selectsEnd || selectsRange)\n      });\n    });\n    _defineProperty(_this, \"getYearContent\", function (y) {\n      return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\n    });\n    return _this;\n  }\n  _inherits(Year, _React$Component);\n  return _createClass(Year, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var yearsList = [];\n      var _this$props8 = this.props,\n        date = _this$props8.date,\n        yearItemNumber = _this$props8.yearItemNumber,\n        onYearMouseEnter = _this$props8.onYearMouseEnter,\n        onYearMouseLeave = _this$props8.onYearMouseLeave;\n      var _utils$getYearsPeriod4 = getYearsPeriod(date, yearItemNumber),\n        startPeriod = _utils$getYearsPeriod4.startPeriod,\n        endPeriod = _utils$getYearsPeriod4.endPeriod;\n      var _loop = function _loop(y) {\n        yearsList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          ref: _this2.YEAR_REFS[y - startPeriod],\n          onClick: function onClick(ev) {\n            _this2.onYearClick(ev, y);\n          },\n          onKeyDown: function onKeyDown(ev) {\n            if (isSpaceKeyDown(ev)) {\n              ev.preventDefault();\n              ev.key = \"Enter\";\n            }\n            _this2.onYearKeyDown(ev, y);\n          },\n          tabIndex: _this2.getYearTabIndex(y),\n          className: _this2.getYearClassNames(y),\n          onMouseEnter: !_this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseEnter(ev, y);\n          } : undefined,\n          onPointerEnter: _this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseEnter(ev, y);\n          } : undefined,\n          onMouseLeave: !_this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseLeave(ev, y);\n          } : undefined,\n          onPointerLeave: _this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseLeave(ev, y);\n          } : undefined,\n          key: y,\n          \"aria-current\": _this2.isCurrentYear(y) ? \"date\" : undefined\n        }, _this2.getYearContent(y)));\n      };\n      for (var y = startPeriod; y <= endPeriod; y++) {\n        _loop(y);\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: this.getYearContainerClassNames()\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__year-wrapper\",\n        onMouseLeave: !this.props.usePointerEvent ? this.props.clearSelectingDate : undefined,\n        onPointerLeave: this.props.usePointerEvent ? this.props.clearSelectingDate : undefined\n      }, yearsList));\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar inputTime = /*#__PURE__*/function (_React$Component) {\n  function inputTime(props) {\n    var _this;\n    _classCallCheck(this, inputTime);\n    _this = _callSuper(this, inputTime, [props]);\n    _defineProperty(_this, \"onTimeChange\", function (time) {\n      _this.setState({\n        time: time\n      });\n      var propDate = _this.props.date;\n      var isPropDateValid = propDate instanceof Date && !isNaN(propDate);\n      var date = isPropDateValid ? propDate : new Date();\n      date.setHours(time.split(\":\")[0]);\n      date.setMinutes(time.split(\":\")[1]);\n      _this.props.onChange(date);\n    });\n    _defineProperty(_this, \"renderTimeInput\", function () {\n      var time = _this.state.time;\n      var _this$props = _this.props,\n        date = _this$props.date,\n        timeString = _this$props.timeString,\n        customTimeInput = _this$props.customTimeInput;\n      if (customTimeInput) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customTimeInput, {\n          date: date,\n          value: time,\n          onChange: _this.onTimeChange\n        });\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        type: \"time\",\n        className: \"react-datepicker-time__input\",\n        placeholder: \"Time\",\n        name: \"time-input\",\n        required: true,\n        value: time,\n        onChange: function onChange(ev) {\n          _this.onTimeChange(ev.target.value || timeString);\n        }\n      });\n    });\n    _this.state = {\n      time: _this.props.timeString\n    };\n    return _this;\n  }\n  _inherits(inputTime, _React$Component);\n  return _createClass(inputTime, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__input-time-container\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__caption\"\n      }, this.props.timeInputLabel), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__input-container\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__input\"\n      }, this.renderTimeInput())));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.timeString !== state.time) {\n        return {\n          time: props.timeString\n        };\n      }\n\n      // Return null to indicate no change to state.\n      return null;\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction CalendarContainer(_ref) {\n  var _ref$showTimeSelectOn = _ref.showTimeSelectOnly,\n    showTimeSelectOnly = _ref$showTimeSelectOn === void 0 ? false : _ref$showTimeSelectOn,\n    _ref$showTime = _ref.showTime,\n    showTime = _ref$showTime === void 0 ? false : _ref$showTime,\n    className = _ref.className,\n    children = _ref.children;\n  var ariaLabel = showTimeSelectOnly ? \"Choose Time\" : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: className,\n    role: \"dialog\",\n    \"aria-label\": ariaLabel,\n    \"aria-modal\": \"true\"\n  }, children);\n}\n\nvar DROPDOWN_FOCUS_CLASSNAMES = [\"react-datepicker__year-select\", \"react-datepicker__month-select\", \"react-datepicker__month-year-select\"];\nvar isDropdownSelect = function isDropdownSelect() {\n  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var classNames = (element.className || \"\").split(/\\s+/);\n  return DROPDOWN_FOCUS_CLASSNAMES.some(function (testClassname) {\n    return classNames.indexOf(testClassname) >= 0;\n  });\n};\nvar Calendar = /*#__PURE__*/function (_React$Component) {\n  function Calendar(props) {\n    var _this;\n    _classCallCheck(this, Calendar);\n    _this = _callSuper(this, Calendar, [props]);\n    _defineProperty(_this, \"handleClickOutside\", function (event) {\n      _this.props.onClickOutside(event);\n    });\n    _defineProperty(_this, \"setClickOutsideRef\", function () {\n      return _this.containerRef.current;\n    });\n    _defineProperty(_this, \"handleDropdownFocus\", function (event) {\n      if (isDropdownSelect(event.target)) {\n        _this.props.onDropdownFocus();\n      }\n    });\n    _defineProperty(_this, \"getDateInView\", function () {\n      var _this$props = _this.props,\n        preSelection = _this$props.preSelection,\n        selected = _this$props.selected,\n        openToDate = _this$props.openToDate;\n      var minDate = getEffectiveMinDate(_this.props);\n      var maxDate = getEffectiveMaxDate(_this.props);\n      var current = newDate();\n      var initialDate = openToDate || selected || preSelection;\n      if (initialDate) {\n        return initialDate;\n      } else {\n        if (minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(current, minDate)) {\n          return minDate;\n        } else if (maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(current, maxDate)) {\n          return maxDate;\n        }\n      }\n      return current;\n    });\n    _defineProperty(_this, \"increaseMonth\", function () {\n      _this.setState(function (_ref) {\n        var date = _ref.date;\n        return {\n          date: (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, 1)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"decreaseMonth\", function () {\n      _this.setState(function (_ref2) {\n        var date = _ref2.date;\n        return {\n          date: (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, 1)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"handleDayClick\", function (day, event, monthSelectedIn) {\n      _this.props.onSelect(day, event, monthSelectedIn);\n      _this.props.setPreSelection && _this.props.setPreSelection(day);\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      _this.setState({\n        selectingDate: day\n      });\n      _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\n    });\n    _defineProperty(_this, \"handleMonthMouseLeave\", function () {\n      _this.setState({\n        selectingDate: null\n      });\n      _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\n    });\n    _defineProperty(_this, \"handleYearMouseEnter\", function (event, year) {\n      _this.setState({\n        selectingDate: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), year)\n      });\n      !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\n    });\n    _defineProperty(_this, \"handleYearMouseLeave\", function (event, year) {\n      !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\n    });\n    _defineProperty(_this, \"handleYearChange\", function (date) {\n      if (_this.props.onYearChange) {\n        _this.props.onYearChange(date);\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      if (_this.props.adjustDateOnChange) {\n        if (_this.props.onSelect) {\n          _this.props.onSelect(date);\n        }\n        if (_this.props.setOpen) {\n          _this.props.setOpen(true);\n        }\n      }\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\n    });\n    _defineProperty(_this, \"handleMonthChange\", function (date) {\n      _this.handleCustomMonthChange(date);\n      if (_this.props.adjustDateOnChange) {\n        if (_this.props.onSelect) {\n          _this.props.onSelect(date);\n        }\n        if (_this.props.setOpen) {\n          _this.props.setOpen(true);\n        }\n      }\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\n    });\n    _defineProperty(_this, \"handleCustomMonthChange\", function (date) {\n      if (_this.props.onMonthChange) {\n        _this.props.onMonthChange(date);\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n    });\n    _defineProperty(_this, \"handleMonthYearChange\", function (date) {\n      _this.handleYearChange(date);\n      _this.handleMonthChange(date);\n    });\n    _defineProperty(_this, \"changeYear\", function (year) {\n      _this.setState(function (_ref3) {\n        var date = _ref3.date;\n        return {\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, year)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"changeMonth\", function (month) {\n      _this.setState(function (_ref4) {\n        var date = _ref4.date;\n        return {\n          date: (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, month)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"changeMonthYear\", function (monthYear) {\n      _this.setState(function (_ref5) {\n        var date = _ref5.date;\n        return {\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(monthYear)), (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthYear))\n        };\n      }, function () {\n        return _this.handleMonthYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"header\", function () {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n      var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\n      var dayNames = [];\n      if (_this.props.showWeekNumbers) {\n        dayNames.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: \"W\",\n          className: \"react-datepicker__day-name\"\n        }, _this.props.weekLabel || \"#\"));\n      }\n      return dayNames.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n        var weekDayName = _this.formatWeekday(day, _this.props.locale);\n        var weekDayClassName = _this.props.weekDayClassName ? _this.props.weekDayClassName(day) : undefined;\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: offset,\n          \"aria-label\": formatDate(day, \"EEEE\", _this.props.locale),\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day-name\", weekDayClassName)\n        }, weekDayName);\n      }));\n    });\n    _defineProperty(_this, \"formatWeekday\", function (day, locale) {\n      if (_this.props.formatWeekDay) {\n        return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\n      }\n      return _this.props.useWeekdaysShort ? getWeekdayShortInLocale(day, locale) : getWeekdayMinInLocale(day, locale);\n    });\n    _defineProperty(_this, \"decreaseYear\", function () {\n      _this.setState(function (_ref6) {\n        var date = _ref6.date;\n        return {\n          date: (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"clearSelectingDate\", function () {\n      _this.setState({\n        selectingDate: null\n      });\n    });\n    _defineProperty(_this, \"renderPreviousButton\", function () {\n      if (_this.props.renderCustomHeader) {\n        return;\n      }\n      var allPrevDaysDisabled;\n      switch (true) {\n        case _this.props.showMonthYearPicker:\n          allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\n          break;\n        case _this.props.showYearPicker:\n          allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\n          break;\n        case _this.props.showQuarterYearPicker:\n          allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\n          break;\n        default:\n          allPrevDaysDisabled = monthDisabledBefore(_this.state.date, _this.props);\n          break;\n      }\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allPrevDaysDisabled || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--previous\"];\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--previous\"];\n      var clickHandler = _this.decreaseMonth;\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n        clickHandler = _this.decreaseYear;\n      }\n      if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\n        classes.push(\"react-datepicker__navigation--previous--disabled\");\n        clickHandler = null;\n      }\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n      var _this$props2 = _this.props,\n        previousMonthButtonLabel = _this$props2.previousMonthButtonLabel,\n        previousYearButtonLabel = _this$props2.previousYearButtonLabel;\n      var _this$props3 = _this.props,\n        _this$props3$previous = _this$props3.previousMonthAriaLabel,\n        previousMonthAriaLabel = _this$props3$previous === void 0 ? typeof previousMonthButtonLabel === \"string\" ? previousMonthButtonLabel : \"Previous Month\" : _this$props3$previous,\n        _this$props3$previous2 = _this$props3.previousYearAriaLabel,\n        previousYearAriaLabel = _this$props3$previous2 === void 0 ? typeof previousYearButtonLabel === \"string\" ? previousYearButtonLabel : \"Previous Year\" : _this$props3$previous2;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        className: classes.join(\" \"),\n        onClick: clickHandler,\n        onKeyDown: _this.props.handleOnKeyDown,\n        \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: iconClasses.join(\" \")\n      }, isForYear ? _this.props.previousYearButtonLabel : _this.props.previousMonthButtonLabel));\n    });\n    _defineProperty(_this, \"increaseYear\", function () {\n      _this.setState(function (_ref7) {\n        var date = _ref7.date;\n        return {\n          date: (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"renderNextButton\", function () {\n      if (_this.props.renderCustomHeader) {\n        return;\n      }\n      var allNextDaysDisabled;\n      switch (true) {\n        case _this.props.showMonthYearPicker:\n          allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\n          break;\n        case _this.props.showYearPicker:\n          allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\n          break;\n        case _this.props.showQuarterYearPicker:\n          allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\n          break;\n        default:\n          allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\n          break;\n      }\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allNextDaysDisabled || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--next\"];\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--next\"];\n      if (_this.props.showTimeSelect) {\n        classes.push(\"react-datepicker__navigation--next--with-time\");\n      }\n      if (_this.props.todayButton) {\n        classes.push(\"react-datepicker__navigation--next--with-today-button\");\n      }\n      var clickHandler = _this.increaseMonth;\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n        clickHandler = _this.increaseYear;\n      }\n      if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\n        classes.push(\"react-datepicker__navigation--next--disabled\");\n        clickHandler = null;\n      }\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n      var _this$props4 = _this.props,\n        nextMonthButtonLabel = _this$props4.nextMonthButtonLabel,\n        nextYearButtonLabel = _this$props4.nextYearButtonLabel;\n      var _this$props5 = _this.props,\n        _this$props5$nextMont = _this$props5.nextMonthAriaLabel,\n        nextMonthAriaLabel = _this$props5$nextMont === void 0 ? typeof nextMonthButtonLabel === \"string\" ? nextMonthButtonLabel : \"Next Month\" : _this$props5$nextMont,\n        _this$props5$nextYear = _this$props5.nextYearAriaLabel,\n        nextYearAriaLabel = _this$props5$nextYear === void 0 ? typeof nextYearButtonLabel === \"string\" ? nextYearButtonLabel : \"Next Year\" : _this$props5$nextYear;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        className: classes.join(\" \"),\n        onClick: clickHandler,\n        onKeyDown: _this.props.handleOnKeyDown,\n        \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: iconClasses.join(\" \")\n      }, isForYear ? _this.props.nextYearButtonLabel : _this.props.nextMonthButtonLabel));\n    });\n    _defineProperty(_this, \"renderCurrentMonth\", function () {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n      var classes = [\"react-datepicker__current-month\"];\n      if (_this.props.showYearDropdown) {\n        classes.push(\"react-datepicker__current-month--hasYearDropdown\");\n      }\n      if (_this.props.showMonthDropdown) {\n        classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\n      }\n      if (_this.props.showMonthYearDropdown) {\n        classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: classes.join(\" \")\n      }, formatDate(date, _this.props.dateFormat, _this.props.locale));\n    });\n    _defineProperty(_this, \"renderYearDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showYearDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(YearDropdown, {\n        adjustDateOnChange: _this.props.adjustDateOnChange,\n        date: _this.state.date,\n        onSelect: _this.props.onSelect,\n        setOpen: _this.props.setOpen,\n        dropdownMode: _this.props.dropdownMode,\n        onChange: _this.changeYear,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        year: (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date),\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n      });\n    });\n    _defineProperty(_this, \"renderMonthDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showMonthDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthDropdown, {\n        dropdownMode: _this.props.dropdownMode,\n        locale: _this.props.locale,\n        onChange: _this.changeMonth,\n        month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date),\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown\n      });\n    });\n    _defineProperty(_this, \"renderMonthYearDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showMonthYearDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthYearDropdown, {\n        dropdownMode: _this.props.dropdownMode,\n        locale: _this.props.locale,\n        dateFormat: _this.props.dateFormat,\n        onChange: _this.changeMonthYear,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        date: _this.state.date,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown\n      });\n    });\n    _defineProperty(_this, \"handleTodayButtonClick\", function (e) {\n      _this.props.onSelect(getStartOfToday(), e);\n      _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\n    });\n    _defineProperty(_this, \"renderTodayButton\", function () {\n      if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__today-button\",\n        onClick: function onClick(e) {\n          return _this.handleTodayButtonClick(e);\n        }\n      }, _this.props.todayButton);\n    });\n    _defineProperty(_this, \"renderDefaultHeader\", function (_ref8) {\n      var monthDate = _ref8.monthDate,\n        i = _ref8.i;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header \".concat(_this.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\n      }, _this.renderCurrentMonth(monthDate), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode),\n        onFocus: _this.handleDropdownFocus\n      }, _this.renderMonthDropdown(i !== 0), _this.renderMonthYearDropdown(i !== 0), _this.renderYearDropdown(i !== 0)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__day-names\"\n      }, _this.header(monthDate)));\n    });\n    _defineProperty(_this, \"renderCustomHeader\", function () {\n      var headerArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var monthDate = headerArgs.monthDate,\n        i = headerArgs.i;\n      if (_this.props.showTimeSelect && !_this.state.monthContainer || _this.props.showTimeSelectOnly) {\n        return null;\n      }\n      var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\n      var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\n      var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\n      var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\n      var showDayNames = !_this.props.showMonthYearPicker && !_this.props.showQuarterYearPicker && !_this.props.showYearPicker;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker__header--custom\",\n        onFocus: _this.props.onDropdownFocus\n      }, _this.props.renderCustomHeader(_objectSpread2(_objectSpread2({}, _this.state), {}, {\n        customHeaderCount: i,\n        monthDate: monthDate,\n        changeMonth: _this.changeMonth,\n        changeYear: _this.changeYear,\n        decreaseMonth: _this.decreaseMonth,\n        increaseMonth: _this.increaseMonth,\n        decreaseYear: _this.decreaseYear,\n        increaseYear: _this.increaseYear,\n        prevMonthButtonDisabled: prevMonthButtonDisabled,\n        nextMonthButtonDisabled: nextMonthButtonDisabled,\n        prevYearButtonDisabled: prevYearButtonDisabled,\n        nextYearButtonDisabled: nextYearButtonDisabled\n      })), showDayNames && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__day-names\"\n      }, _this.header(monthDate)));\n    });\n    _defineProperty(_this, \"renderYearHeader\", function (_ref9) {\n      var monthDate = _ref9.monthDate;\n      var _this$props6 = _this.props,\n        showYearPicker = _this$props6.showYearPicker,\n        yearItemNumber = _this$props6.yearItemNumber;\n      var _getYearsPeriod = getYearsPeriod(monthDate, yearItemNumber),\n        startPeriod = _getYearsPeriod.startPeriod,\n        endPeriod = _getYearsPeriod.endPeriod;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker-year-header\"\n      }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthDate));\n    });\n    _defineProperty(_this, \"renderHeader\", function (headerArgs) {\n      switch (true) {\n        case _this.props.renderCustomHeader !== undefined:\n          return _this.renderCustomHeader(headerArgs);\n        case _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker:\n          return _this.renderYearHeader(headerArgs);\n        default:\n          return _this.renderDefaultHeader(headerArgs);\n      }\n    });\n    _defineProperty(_this, \"renderMonths\", function () {\n      var _this$props$monthSele;\n      if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\n        return;\n      }\n      var monthList = [];\n      var monthsToSubtract = _this.props.showPreviousMonths ? _this.props.monthsShown - 1 : 0;\n      var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.state.date, monthsToSubtract) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(_this.state.date, monthsToSubtract);\n      var monthSelectedIn = (_this$props$monthSele = _this.props.monthSelectedIn) !== null && _this$props$monthSele !== void 0 ? _this$props$monthSele : monthsToSubtract;\n      for (var i = 0; i < _this.props.monthsShown; ++i) {\n        var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\n        var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(fromMonthDate, monthsToAdd) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(fromMonthDate, monthsToAdd);\n        var monthKey = \"month-\".concat(i);\n        var monthShowsDuplicateDaysEnd = i < _this.props.monthsShown - 1;\n        var monthShowsDuplicateDaysStart = i > 0;\n        monthList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: monthKey,\n          ref: function ref(div) {\n            _this.monthContainer = div;\n          },\n          className: \"react-datepicker__month-container\"\n        }, _this.renderHeader({\n          monthDate: monthDate,\n          i: i\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Month, {\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n          weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n          ariaLabelPrefix: _this.props.monthAriaLabelPrefix,\n          onChange: _this.changeMonthYear,\n          day: monthDate,\n          dayClassName: _this.props.dayClassName,\n          calendarStartDay: _this.props.calendarStartDay,\n          monthClassName: _this.props.monthClassName,\n          onDayClick: _this.handleDayClick,\n          handleOnKeyDown: _this.props.handleOnDayKeyDown,\n          handleOnMonthKeyDown: _this.props.handleOnKeyDown,\n          usePointerEvent: _this.props.usePointerEvent,\n          onDayMouseEnter: _this.handleDayMouseEnter,\n          onMouseLeave: _this.handleMonthMouseLeave,\n          onWeekSelect: _this.props.onWeekSelect,\n          orderInDisplay: i,\n          formatWeekNumber: _this.props.formatWeekNumber,\n          locale: _this.props.locale,\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.state.selectingDate,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          fixedHeight: _this.props.fixedHeight,\n          filterDate: _this.props.filterDate,\n          preSelection: _this.props.preSelection,\n          setPreSelection: _this.props.setPreSelection,\n          selected: _this.props.selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          showWeekNumbers: _this.props.showWeekNumbers,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          peekNextMonth: _this.props.peekNextMonth,\n          setOpen: _this.props.setOpen,\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n          renderDayContents: _this.props.renderDayContents,\n          renderMonthContent: _this.props.renderMonthContent,\n          renderQuarterContent: _this.props.renderQuarterContent,\n          renderYearContent: _this.props.renderYearContent,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          showMonthYearPicker: _this.props.showMonthYearPicker,\n          showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n          showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n          showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n          showYearPicker: _this.props.showYearPicker,\n          showQuarterYearPicker: _this.props.showQuarterYearPicker,\n          showWeekPicker: _this.props.showWeekPicker,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.containerRef,\n          monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart\n        })));\n      }\n      return monthList;\n    });\n    _defineProperty(_this, \"renderYears\", function () {\n      if (_this.props.showTimeSelectOnly) {\n        return;\n      }\n      if (_this.props.showYearPicker) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year--container\"\n        }, _this.renderHeader({\n          monthDate: _this.state.date\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Year, _extends({\n          onDayClick: _this.handleDayClick,\n          selectingDate: _this.state.selectingDate,\n          clearSelectingDate: _this.clearSelectingDate,\n          date: _this.state.date\n        }, _this.props, {\n          onYearMouseEnter: _this.handleYearMouseEnter,\n          onYearMouseLeave: _this.handleYearMouseLeave\n        })));\n      }\n    });\n    _defineProperty(_this, \"renderTimeSection\", function () {\n      if (_this.props.showTimeSelect && (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Time, {\n          selected: _this.props.selected,\n          openToDate: _this.props.openToDate,\n          onChange: _this.props.onTimeChange,\n          timeClassName: _this.props.timeClassName,\n          format: _this.props.timeFormat,\n          includeTimes: _this.props.includeTimes,\n          intervals: _this.props.timeIntervals,\n          minTime: _this.props.minTime,\n          maxTime: _this.props.maxTime,\n          excludeTimes: _this.props.excludeTimes,\n          filterTime: _this.props.filterTime,\n          timeCaption: _this.props.timeCaption,\n          todayButton: _this.props.todayButton,\n          showMonthDropdown: _this.props.showMonthDropdown,\n          showMonthYearDropdown: _this.props.showMonthYearDropdown,\n          showYearDropdown: _this.props.showYearDropdown,\n          withPortal: _this.props.withPortal,\n          monthRef: _this.state.monthContainer,\n          injectTimes: _this.props.injectTimes,\n          locale: _this.props.locale,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          showTimeSelectOnly: _this.props.showTimeSelectOnly\n        });\n      }\n    });\n    _defineProperty(_this, \"renderInputTimeSection\", function () {\n      var time = new Date(_this.props.selected);\n      var timeValid = isValid(time) && Boolean(_this.props.selected);\n      var timeString = timeValid ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes())) : \"\";\n      if (_this.props.showTimeInput) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(inputTime, {\n          date: time,\n          timeString: timeString,\n          timeInputLabel: _this.props.timeInputLabel,\n          onChange: _this.props.onTimeChange,\n          customTimeInput: _this.props.customTimeInput\n        });\n      }\n    });\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\n      var _getYearsPeriod2 = getYearsPeriod(_this.state.date, _this.props.yearItemNumber),\n        startPeriod = _getYearsPeriod2.startPeriod,\n        endPeriod = _getYearsPeriod2.endPeriod;\n      var ariaLiveMessage;\n      if (_this.props.showYearPicker) {\n        ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\n      } else if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker) {\n        ariaLiveMessage = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date);\n      } else {\n        ariaLiveMessage = \"\".concat(getMonthInLocale((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date));\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        role: \"alert\",\n        \"aria-live\": \"polite\",\n        className: \"react-datepicker__aria-live\"\n      }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage);\n    });\n    _defineProperty(_this, \"renderChildren\", function () {\n      if (_this.props.children) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__children-container\"\n        }, _this.props.children);\n      }\n    });\n    _this.containerRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    _this.state = {\n      date: _this.getDateInView(),\n      selectingDate: null,\n      monthContainer: null,\n      isRenderAriaLiveMessage: false\n    };\n    return _this;\n  }\n  _inherits(Calendar, _React$Component);\n  return _createClass(Calendar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      // monthContainer height is needed in time component\n      // to determine the height for the ul in the time component\n      // setState here so height is given after final component\n      // layout is rendered\n      if (this.props.showTimeSelect) {\n        this.assignMonthContainer = function () {\n          _this2.setState({\n            monthContainer: _this2.monthContainer\n          });\n        }();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n      if (this.props.preSelection && (!isSameDay(this.props.preSelection, prevProps.preSelection) || this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\n        var hasMonthChanged = !isSameMonth(this.state.date, this.props.preSelection);\n        this.setState({\n          date: this.props.preSelection\n        }, function () {\n          return hasMonthChanged && _this3.handleCustomMonthChange(_this3.state.date);\n        });\n      } else if (this.props.openToDate && !isSameDay(this.props.openToDate, prevProps.openToDate)) {\n        this.setState({\n          date: this.props.openToDate\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Container = this.props.container || CalendarContainer;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n          display: \"contents\"\n        },\n        ref: this.containerRef\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker\", this.props.className, {\n          \"react-datepicker--time-only\": this.props.showTimeSelectOnly\n        }),\n        showTime: this.props.showTimeSelect || this.props.showTimeInput,\n        showTimeSelectOnly: this.props.showTimeSelectOnly\n      }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        onDropdownFocus: function onDropdownFocus() {},\n        monthsShown: 1,\n        forceShowMonthNavigation: false,\n        timeCaption: \"Time\",\n        previousYearButtonLabel: \"Previous Year\",\n        nextYearButtonLabel: \"Next Year\",\n        previousMonthButtonLabel: \"Previous Month\",\n        nextMonthButtonLabel: \"Next Month\",\n        customTimeInput: null,\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar CalendarIcon = function CalendarIcon(_ref) {\n  var icon = _ref.icon,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? \"\" : _ref$className,\n    _onClick = _ref.onClick;\n  var defaultClass = \"react-datepicker__calendar-icon\";\n  if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(icon)) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(icon, {\n      className: \"\".concat(icon.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\n      onClick: function onClick(e) {\n        if (typeof icon.props.onClick === \"function\") {\n          icon.props.onClick(e);\n        }\n        if (typeof _onClick === \"function\") {\n          _onClick(e);\n        }\n      }\n    });\n  }\n  if (typeof icon === \"string\") {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"i\", {\n      className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className),\n      \"aria-hidden\": \"true\",\n      onClick: _onClick\n    });\n  }\n\n  // Default SVG Icon\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n    className: \"\".concat(defaultClass, \" \").concat(className),\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 448 512\",\n    onClick: _onClick\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n    d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\n  }));\n};\nvar CalendarIcon$1 = CalendarIcon;\n\nvar Portal = /*#__PURE__*/function (_React$Component) {\n  function Portal(props) {\n    var _this;\n    _classCallCheck(this, Portal);\n    _this = _callSuper(this, Portal, [props]);\n    _this.el = document.createElement(\"div\");\n    return _this;\n  }\n  _inherits(Portal, _React$Component);\n  return _createClass(Portal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\n      if (!this.portalRoot) {\n        this.portalRoot = document.createElement(\"div\");\n        this.portalRoot.setAttribute(\"id\", this.props.portalId);\n        (this.props.portalHost || document.body).appendChild(this.portalRoot);\n      }\n      this.portalRoot.appendChild(this.el);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.portalRoot.removeChild(this.el);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_3___default().createPortal(this.props.children, this.el);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\n// TabLoop prevents the user from tabbing outside of the popper\n// It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\n// and \"Shift Tab\" on the first element will focus the last element\n\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\nvar focusableFilter = function focusableFilter(node) {\n  return !node.disabled && node.tabIndex !== -1;\n};\nvar TabLoop = /*#__PURE__*/function (_React$Component) {\n  function TabLoop(props) {\n    var _this;\n    _classCallCheck(this, TabLoop);\n    _this = _callSuper(this, TabLoop, [props]);\n    // query all focusable elements\n    // trim first and last because they are the focus guards\n    _defineProperty(_this, \"getTabChildren\", function () {\n      return Array.prototype.slice.call(_this.tabLoopRef.current.querySelectorAll(focusableElementsSelector), 1, -1).filter(focusableFilter);\n    });\n    _defineProperty(_this, \"handleFocusStart\", function () {\n      var tabChildren = _this.getTabChildren();\n      tabChildren && tabChildren.length > 1 && tabChildren[tabChildren.length - 1].focus();\n    });\n    _defineProperty(_this, \"handleFocusEnd\", function () {\n      var tabChildren = _this.getTabChildren();\n      tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\n    });\n    _this.tabLoopRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    return _this;\n  }\n  _inherits(TabLoop, _React$Component);\n  return _createClass(TabLoop, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.enableTabLoop) {\n        return this.props.children;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop\",\n        ref: this.tabLoopRef\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop__start\",\n        tabIndex: \"0\",\n        onFocus: this.handleFocusStart\n      }), this.props.children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop__end\",\n        tabIndex: \"0\",\n        onFocus: this.handleFocusEnd\n      }));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        enableTabLoop: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction withFloating(Component) {\n  var WithFloating = function WithFloating(props) {\n    var alt_props = _objectSpread2(_objectSpread2({}, props), {}, {\n      popperModifiers: props.popperModifiers || [],\n      popperProps: props.popperProps || {},\n      hidePopper: typeof props.hidePopper === \"boolean\" ? props.hidePopper : true\n    });\n    var arrowRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.useFloating)(_objectSpread2({\n      open: !alt_props.hidePopper,\n      whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.autoUpdate,\n      placement: alt_props.popperPlacement,\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.flip)({\n        padding: 15\n      }), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.arrow)({\n        element: arrowRef\n      })].concat(_toConsumableArray(alt_props.popperModifiers))\n    }, alt_props.popperProps));\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _extends({}, alt_props, {\n      popperProps: _objectSpread2(_objectSpread2({}, floatingProps), {}, {\n        arrowRef: arrowRef\n      })\n    }));\n  };\n  return WithFloating;\n}\n\n// Exported for testing purposes\nvar PopperComponent = /*#__PURE__*/function (_React$Component) {\n  function PopperComponent() {\n    _classCallCheck(this, PopperComponent);\n    return _callSuper(this, PopperComponent, arguments);\n  }\n  _inherits(PopperComponent, _React$Component);\n  return _createClass(PopperComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        wrapperClassName = _this$props.wrapperClassName,\n        hidePopper = _this$props.hidePopper,\n        popperComponent = _this$props.popperComponent,\n        targetComponent = _this$props.targetComponent,\n        enableTabLoop = _this$props.enableTabLoop,\n        popperOnKeyDown = _this$props.popperOnKeyDown,\n        portalId = _this$props.portalId,\n        portalHost = _this$props.portalHost,\n        popperProps = _this$props.popperProps,\n        showArrow = _this$props.showArrow;\n      var popper;\n      if (!hidePopper) {\n        var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-popper\", className);\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n          enableTabLoop: enableTabLoop\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          ref: popperProps.refs.setFloating,\n          style: popperProps.floatingStyles,\n          className: classes,\n          \"data-placement\": popperProps.placement,\n          onKeyDown: popperOnKeyDown\n        }, popperComponent, showArrow && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.FloatingArrow, {\n          ref: popperProps.arrowRef,\n          context: popperProps.context,\n          fill: \"currentColor\",\n          strokeWidth: 1,\n          height: 8,\n          width: 16,\n          style: {\n            transform: \"translateY(-1px)\"\n          },\n          className: \"react-datepicker__triangle\"\n        })));\n      }\n      if (this.props.popperContainer) {\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(this.props.popperContainer, {}, popper);\n      }\n      if (portalId && !hidePopper) {\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n          portalId: portalId,\n          portalHost: portalHost\n        }, popper);\n      }\n      var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: popperProps.refs.setReference,\n        className: wrapperClasses\n      }, targetComponent), popper);\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        hidePopper: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PopperComponent$1 = withFloating(PopperComponent);\n\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\nvar WrappedCalendar = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Calendar);\n\n// Compares dates year+month combinations\nfunction hasPreSelectionChanged(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date1) !== (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date2) || (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date1) !== (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date2);\n  }\n  return date1 !== date2;\n}\n\n/**\n * General datepicker component.\n */\nvar INPUT_ERR_1 = \"Date input not valid.\";\nvar DatePicker = /*#__PURE__*/function (_React$Component) {\n  function DatePicker(props) {\n    var _this;\n    _classCallCheck(this, DatePicker);\n    _this = _callSuper(this, DatePicker, [props]);\n    _defineProperty(_this, \"getPreSelection\", function () {\n      return _this.props.openToDate ? _this.props.openToDate : _this.props.selectsEnd && _this.props.startDate ? _this.props.startDate : _this.props.selectsStart && _this.props.endDate ? _this.props.endDate : newDate();\n    });\n    // Convert the date from string format to standard Date format\n    _defineProperty(_this, \"modifyHolidays\", function () {\n      var _this$props$holidays;\n      return (_this$props$holidays = _this.props.holidays) === null || _this$props$holidays === void 0 ? void 0 : _this$props$holidays.reduce(function (accumulator, holiday) {\n        var date = new Date(holiday.date);\n        if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date)) {\n          return accumulator;\n        }\n        return [].concat(_toConsumableArray(accumulator), [_objectSpread2(_objectSpread2({}, holiday), {}, {\n          date: date\n        })]);\n      }, []);\n    });\n    _defineProperty(_this, \"calcInitialState\", function () {\n      var _ref;\n      var defaultPreSelection = _this.getPreSelection();\n      var minDate = getEffectiveMinDate(_this.props);\n      var maxDate = getEffectiveMaxDate(_this.props);\n      var boundedPreSelection = minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(defaultPreSelection, (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(minDate)) ? minDate : maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(defaultPreSelection, (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(maxDate)) ? maxDate : defaultPreSelection;\n      return {\n        open: _this.props.startOpen || false,\n        preventFocus: false,\n        preSelection: (_ref = _this.props.selectsRange ? _this.props.startDate : _this.props.selected) !== null && _ref !== void 0 ? _ref : boundedPreSelection,\n        // transforming highlighted days (perhaps nested array)\n        // to flat Map for faster access in day.jsx\n        highlightDates: getHightLightDaysMap(_this.props.highlightDates),\n        focused: false,\n        // used to focus day in inline version after month has changed, but not on\n        // initial render\n        shouldFocusDayInline: false,\n        isRenderAriaLiveMessage: false\n      };\n    });\n    _defineProperty(_this, \"clearPreventFocusTimeout\", function () {\n      if (_this.preventFocusTimeout) {\n        clearTimeout(_this.preventFocusTimeout);\n      }\n    });\n    _defineProperty(_this, \"setFocus\", function () {\n      if (_this.input && _this.input.focus) {\n        _this.input.focus({\n          preventScroll: true\n        });\n      }\n    });\n    _defineProperty(_this, \"setBlur\", function () {\n      if (_this.input && _this.input.blur) {\n        _this.input.blur();\n      }\n      _this.cancelFocusInput();\n    });\n    _defineProperty(_this, \"setOpen\", function (open) {\n      var skipSetBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _this.setState({\n        open: open,\n        preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n      }, function () {\n        if (!open) {\n          _this.setState(function (prev) {\n            return {\n              focused: skipSetBlur ? prev.focused : false\n            };\n          }, function () {\n            !skipSetBlur && _this.setBlur();\n            _this.setState({\n              inputValue: null\n            });\n          });\n        }\n      });\n    });\n    _defineProperty(_this, \"inputOk\", function () {\n      return (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.state.preSelection);\n    });\n    _defineProperty(_this, \"isCalendarOpen\", function () {\n      return _this.props.open === undefined ? _this.state.open && !_this.props.disabled && !_this.props.readOnly : _this.props.open;\n    });\n    _defineProperty(_this, \"handleFocus\", function (event) {\n      if (!_this.state.preventFocus) {\n        _this.props.onFocus(event);\n        if (!_this.props.preventOpenOnFocus && !_this.props.readOnly) {\n          _this.setOpen(true);\n        }\n      }\n      _this.setState({\n        focused: true\n      });\n    });\n    _defineProperty(_this, \"sendFocusBackToInput\", function () {\n      // Clear previous timeout if it exists\n      if (_this.preventFocusTimeout) {\n        _this.clearPreventFocusTimeout();\n      }\n\n      // close the popper and refocus the input\n      // stop the input from auto opening onFocus\n      // setFocus to the input\n      _this.setState({\n        preventFocus: true\n      }, function () {\n        _this.preventFocusTimeout = setTimeout(function () {\n          _this.setFocus();\n          _this.setState({\n            preventFocus: false\n          });\n        });\n      });\n    });\n    _defineProperty(_this, \"cancelFocusInput\", function () {\n      clearTimeout(_this.inputFocusTimeout);\n      _this.inputFocusTimeout = null;\n    });\n    _defineProperty(_this, \"deferFocusInput\", function () {\n      _this.cancelFocusInput();\n      _this.inputFocusTimeout = setTimeout(function () {\n        return _this.setFocus();\n      }, 1);\n    });\n    _defineProperty(_this, \"handleDropdownFocus\", function () {\n      _this.cancelFocusInput();\n    });\n    _defineProperty(_this, \"handleBlur\", function (event) {\n      if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\n        _this.props.onBlur(event);\n      }\n      _this.setState({\n        focused: false\n      });\n    });\n    _defineProperty(_this, \"handleCalendarClickOutside\", function (event) {\n      if (!_this.props.inline) {\n        _this.setOpen(false);\n      }\n      _this.props.onClickOutside(event);\n      if (_this.props.withPortal) {\n        event.preventDefault();\n      }\n    });\n    _defineProperty(_this, \"handleChange\", function () {\n      for (var _len = arguments.length, allArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        allArgs[_key] = arguments[_key];\n      }\n      var event = allArgs[0];\n      if (_this.props.onChangeRaw) {\n        _this.props.onChangeRaw.apply(_this, allArgs);\n        if (typeof event.isDefaultPrevented !== \"function\" || event.isDefaultPrevented()) {\n          return;\n        }\n      }\n      _this.setState({\n        inputValue: event.target.value,\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT\n      });\n      var date = parseDate(event.target.value, _this.props.dateFormat, _this.props.locale, _this.props.strictParsing, _this.props.minDate);\n      // Use date from `selected` prop when manipulating only time for input value\n      if (_this.props.showTimeSelectOnly && _this.props.selected && date && !isSameDay(date, _this.props.selected)) {\n        date = (0,date_fns_set__WEBPACK_IMPORTED_MODULE_64__.set)(_this.props.selected, {\n          hours: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(date),\n          minutes: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(date),\n          seconds: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(date)\n        });\n      }\n      if (date || !event.target.value) {\n        _this.setSelected(date, event, true);\n      }\n    });\n    _defineProperty(_this, \"handleSelect\", function (date, event, monthSelectedIn) {\n      if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\n        // Preventing onFocus event to fix issue\n        // https://github.com/Hacker0x01/react-datepicker/issues/628\n        _this.sendFocusBackToInput();\n      }\n      if (_this.props.onChangeRaw) {\n        _this.props.onChangeRaw(event);\n      }\n      _this.setSelected(date, event, false, monthSelectedIn);\n      if (_this.props.showDateSelect) {\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\n        _this.setPreSelection(date);\n      } else if (!_this.props.inline) {\n        if (!_this.props.selectsRange) {\n          _this.setOpen(false);\n        }\n        var _this$props = _this.props,\n          startDate = _this$props.startDate,\n          endDate = _this$props.endDate;\n        if (startDate && !endDate && (_this.props.swapRange || !isDateBefore(date, startDate))) {\n          _this.setOpen(false);\n        }\n      }\n    });\n    _defineProperty(_this, \"setSelected\", function (date, event, keepInput, monthSelectedIn) {\n      var changedDate = date;\n      if (_this.props.showYearPicker) {\n        if (changedDate !== null && isYearDisabled((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(changedDate), _this.props)) {\n          return;\n        }\n      } else if (_this.props.showMonthYearPicker) {\n        if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\n          return;\n        }\n      } else {\n        if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\n          return;\n        }\n      }\n      var _this$props2 = _this.props,\n        onChange = _this$props2.onChange,\n        selectsRange = _this$props2.selectsRange,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate,\n        selectsMultiple = _this$props2.selectsMultiple,\n        selectedDates = _this$props2.selectedDates,\n        minTime = _this$props2.minTime,\n        swapRange = _this$props2.swapRange;\n      if (!isEqual(_this.props.selected, changedDate) || _this.props.allowSameDay || selectsRange || selectsMultiple) {\n        if (changedDate !== null) {\n          if (_this.props.selected && (!keepInput || !_this.props.showTimeSelect && !_this.props.showTimeSelectOnly && !_this.props.showTimeInput)) {\n            changedDate = setTime(changedDate, {\n              hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(_this.props.selected),\n              minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(_this.props.selected),\n              second: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(_this.props.selected)\n            });\n          }\n\n          // If minTime is present then set the time to minTime\n          if (!keepInput && (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\n            if (minTime) {\n              changedDate = setTime(changedDate, {\n                hour: minTime.getHours(),\n                minute: minTime.getMinutes(),\n                second: minTime.getSeconds()\n              });\n            }\n          }\n          if (!_this.props.inline) {\n            _this.setState({\n              preSelection: changedDate\n            });\n          }\n          if (!_this.props.focusSelectedMonth) {\n            _this.setState({\n              monthSelectedIn: monthSelectedIn\n            });\n          }\n        }\n        if (selectsRange) {\n          var noRanges = !startDate && !endDate;\n          var hasStartRange = startDate && !endDate;\n          var isRangeFilled = startDate && endDate;\n          if (noRanges) {\n            onChange([changedDate, null], event);\n          } else if (hasStartRange) {\n            if (changedDate === null) {\n              onChange([null, null], event);\n            } else if (isDateBefore(changedDate, startDate)) {\n              if (swapRange) {\n                onChange([changedDate, startDate], event);\n              } else {\n                onChange([changedDate, null], event);\n              }\n            } else {\n              onChange([startDate, changedDate], event);\n            }\n          }\n          if (isRangeFilled) {\n            onChange([changedDate, null], event);\n          }\n        } else if (selectsMultiple) {\n          if (!(selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n            onChange([changedDate], event);\n          } else {\n            var isChangedDateAlreadySelected = selectedDates.some(function (selectedDate) {\n              return isSameDay(selectedDate, changedDate);\n            });\n            if (isChangedDateAlreadySelected) {\n              var nextDates = selectedDates.filter(function (selectedDate) {\n                return !isSameDay(selectedDate, changedDate);\n              });\n              onChange(nextDates, event);\n            } else {\n              onChange([].concat(_toConsumableArray(selectedDates), [changedDate]), event);\n            }\n          }\n        } else {\n          onChange(changedDate, event);\n        }\n      }\n      if (!keepInput) {\n        _this.props.onSelect(changedDate, event);\n        _this.setState({\n          inputValue: null\n        });\n      }\n    });\n    // When checking preSelection via min/maxDate, times need to be manipulated via startOfDay/endOfDay\n    _defineProperty(_this, \"setPreSelection\", function (date) {\n      var hasMinDate = typeof _this.props.minDate !== \"undefined\";\n      var hasMaxDate = typeof _this.props.maxDate !== \"undefined\";\n      var isValidDateSelection = true;\n      if (date) {\n        var dateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n        if (hasMinDate && hasMaxDate) {\n          // isDayInRange uses startOfDay internally, so not necessary to manipulate times here\n          isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\n        } else if (hasMinDate) {\n          var minDateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(_this.props.minDate);\n          isValidDateSelection = (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(date, minDateStartOfDay) || isEqual(dateStartOfDay, minDateStartOfDay);\n        } else if (hasMaxDate) {\n          var maxDateEndOfDay = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(_this.props.maxDate);\n          isValidDateSelection = (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, maxDateEndOfDay) || isEqual(dateStartOfDay, maxDateEndOfDay);\n        }\n      }\n      if (isValidDateSelection) {\n        _this.setState({\n          preSelection: date\n        });\n      }\n    });\n    _defineProperty(_this, \"toggleCalendar\", function () {\n      _this.setOpen(!_this.state.open);\n    });\n    _defineProperty(_this, \"handleTimeChange\", function (time) {\n      var selected = _this.props.selected ? _this.props.selected : _this.getPreSelection();\n      var changedDate = _this.props.selected ? time : setTime(selected, {\n        hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time),\n        minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time)\n      });\n      _this.setState({\n        preSelection: changedDate\n      });\n      _this.props.onChange(changedDate);\n      if (_this.props.shouldCloseOnSelect) {\n        _this.sendFocusBackToInput();\n        _this.setOpen(false);\n      }\n      if (_this.props.showTimeInput) {\n        _this.setOpen(true);\n      }\n      if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      _this.setState({\n        inputValue: null\n      });\n    });\n    _defineProperty(_this, \"onInputClick\", function () {\n      if (!_this.props.disabled && !_this.props.readOnly) {\n        _this.setOpen(true);\n      }\n      _this.props.onInputClick();\n    });\n    _defineProperty(_this, \"onInputKeyDown\", function (event) {\n      _this.props.onKeyDown(event);\n      var eventKey = event.key;\n      if (!_this.state.open && !_this.props.inline && !_this.props.preventOpenOnFocus) {\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\" || eventKey === \"Enter\") {\n          _this.onInputClick();\n        }\n        return;\n      }\n\n      // if calendar is open, these keys will focus the selected item\n      if (_this.state.open) {\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\") {\n          event.preventDefault();\n          var selectorString = _this.props.showWeekPicker && _this.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : _this.props.showFullMonthYearPicker || _this.props.showMonthYearPicker ? '.react-datepicker__month-text[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]';\n          var selectedItem = _this.calendar.componentNode && _this.calendar.componentNode.querySelector(selectorString);\n          selectedItem && selectedItem.focus({\n            preventScroll: true\n          });\n          return;\n        }\n        var copy = newDate(_this.state.preSelection);\n        if (eventKey === \"Enter\") {\n          event.preventDefault();\n          if (_this.inputOk() && _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\n            _this.handleSelect(copy, event);\n            !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n          } else {\n            _this.setOpen(false);\n          }\n        } else if (eventKey === \"Escape\") {\n          event.preventDefault();\n          _this.sendFocusBackToInput();\n          _this.setOpen(false);\n        } else if (eventKey === \"Tab\") {\n          _this.setOpen(false);\n        }\n        if (!_this.inputOk()) {\n          _this.props.onInputError({\n            code: 1,\n            msg: INPUT_ERR_1\n          });\n        }\n      }\n    });\n    _defineProperty(_this, \"onPortalKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.setState({\n          preventFocus: true\n        }, function () {\n          _this.setOpen(false);\n          setTimeout(function () {\n            _this.setFocus();\n            _this.setState({\n              preventFocus: false\n            });\n          });\n        });\n      }\n    });\n    // keyDown events passed down to day.jsx\n    _defineProperty(_this, \"onDayKeyDown\", function (event) {\n      _this.props.onKeyDown(event);\n      var eventKey = event.key;\n      var isShiftKeyActive = event.shiftKey;\n      var copy = newDate(_this.state.preSelection);\n      if (eventKey === \"Enter\") {\n        event.preventDefault();\n        _this.handleSelect(copy, event);\n        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n      } else if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.setOpen(false);\n        if (!_this.inputOk()) {\n          _this.props.onInputError({\n            code: 1,\n            msg: INPUT_ERR_1\n          });\n        }\n      } else if (!_this.props.disabledKeyboardNavigation) {\n        var newSelection;\n        switch (eventKey) {\n          case \"ArrowLeft\":\n            if (_this.props.showWeekPicker) {\n              newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\n            } else {\n              newSelection = (0,date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__.subDays)(copy, 1);\n            }\n            break;\n          case \"ArrowRight\":\n            if (_this.props.showWeekPicker) {\n              newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n            } else {\n              newSelection = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(copy, 1);\n            }\n            break;\n          case \"ArrowUp\":\n            newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\n            break;\n          case \"ArrowDown\":\n            newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n            break;\n          case \"PageUp\":\n            newSelection = isShiftKeyActive ? (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(copy, 1) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(copy, 1);\n            break;\n          case \"PageDown\":\n            newSelection = isShiftKeyActive ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(copy, 1) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(copy, 1);\n            break;\n          case \"Home\":\n            newSelection = getStartOfWeek(copy, _this.props.locale, _this.props.calendarStartDay);\n            break;\n          case \"End\":\n            newSelection = getEndOfWeek(copy);\n            break;\n          default:\n            newSelection = null;\n            break;\n        }\n        if (!newSelection) {\n          if (_this.props.onInputError) {\n            _this.props.onInputError({\n              code: 1,\n              msg: INPUT_ERR_1\n            });\n          }\n          return;\n        }\n        event.preventDefault();\n        _this.setState({\n          lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n        });\n        if (_this.props.adjustDateOnChange) {\n          _this.setSelected(newSelection);\n        }\n        _this.setPreSelection(newSelection);\n        // need to figure out whether month has changed to focus day in inline version\n        if (_this.props.inline) {\n          var prevMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(copy);\n          var newMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newSelection);\n          var prevYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(copy);\n          var newYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newSelection);\n          if (prevMonth !== newMonth || prevYear !== newYear) {\n            // month has changed\n            _this.setState({\n              shouldFocusDayInline: true\n            });\n          } else {\n            // month hasn't changed\n            _this.setState({\n              shouldFocusDayInline: false\n            });\n          }\n        }\n      }\n    });\n    // handle generic key down events in the popper that do not adjust or select dates\n    // ex: while focusing prev and next month buttons\n    _defineProperty(_this, \"onPopperKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.sendFocusBackToInput();\n      }\n    });\n    _defineProperty(_this, \"onClearClick\", function (event) {\n      if (event) {\n        if (event.preventDefault) {\n          event.preventDefault();\n        }\n      }\n      _this.sendFocusBackToInput();\n      if (_this.props.selectsRange) {\n        _this.props.onChange([null, null], event);\n      } else {\n        _this.props.onChange(null, event);\n      }\n      _this.setState({\n        inputValue: null\n      });\n    });\n    _defineProperty(_this, \"clear\", function () {\n      _this.onClearClick();\n    });\n    _defineProperty(_this, \"onScroll\", function (event) {\n      if (typeof _this.props.closeOnScroll === \"boolean\" && _this.props.closeOnScroll) {\n        if (event.target === document || event.target === document.documentElement || event.target === document.body) {\n          _this.setOpen(false);\n        }\n      } else if (typeof _this.props.closeOnScroll === \"function\") {\n        if (_this.props.closeOnScroll(event)) {\n          _this.setOpen(false);\n        }\n      }\n    });\n    _defineProperty(_this, \"renderCalendar\", function () {\n      if (!_this.props.inline && !_this.isCalendarOpen()) {\n        return null;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedCalendar, {\n        ref: function ref(elem) {\n          _this.calendar = elem;\n        },\n        locale: _this.props.locale,\n        calendarStartDay: _this.props.calendarStartDay,\n        chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n        disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n        weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n        monthAriaLabelPrefix: _this.props.monthAriaLabelPrefix,\n        adjustDateOnChange: _this.props.adjustDateOnChange,\n        setOpen: _this.setOpen,\n        shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n        dateFormat: _this.props.dateFormatCalendar,\n        useWeekdaysShort: _this.props.useWeekdaysShort,\n        formatWeekDay: _this.props.formatWeekDay,\n        dropdownMode: _this.props.dropdownMode,\n        selected: _this.props.selected,\n        preSelection: _this.state.preSelection,\n        onSelect: _this.handleSelect,\n        onWeekSelect: _this.props.onWeekSelect,\n        openToDate: _this.props.openToDate,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        selectsStart: _this.props.selectsStart,\n        selectsEnd: _this.props.selectsEnd,\n        selectsRange: _this.props.selectsRange,\n        selectsMultiple: _this.props.selectsMultiple,\n        selectedDates: _this.props.selectedDates,\n        startDate: _this.props.startDate,\n        endDate: _this.props.endDate,\n        excludeDates: _this.props.excludeDates,\n        excludeDateIntervals: _this.props.excludeDateIntervals,\n        filterDate: _this.props.filterDate,\n        onClickOutside: _this.handleCalendarClickOutside,\n        formatWeekNumber: _this.props.formatWeekNumber,\n        highlightDates: _this.state.highlightDates,\n        holidays: getHolidaysMap(_this.modifyHolidays()),\n        includeDates: _this.props.includeDates,\n        includeDateIntervals: _this.props.includeDateIntervals,\n        includeTimes: _this.props.includeTimes,\n        injectTimes: _this.props.injectTimes,\n        inline: _this.props.inline,\n        shouldFocusDayInline: _this.state.shouldFocusDayInline,\n        peekNextMonth: _this.props.peekNextMonth,\n        showMonthDropdown: _this.props.showMonthDropdown,\n        showPreviousMonths: _this.props.showPreviousMonths,\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown,\n        showMonthYearDropdown: _this.props.showMonthYearDropdown,\n        showWeekNumbers: _this.props.showWeekNumbers,\n        showYearDropdown: _this.props.showYearDropdown,\n        withPortal: _this.props.withPortal,\n        forceShowMonthNavigation: _this.props.forceShowMonthNavigation,\n        showDisabledMonthNavigation: _this.props.showDisabledMonthNavigation,\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n        todayButton: _this.props.todayButton,\n        weekLabel: _this.props.weekLabel,\n        outsideClickIgnoreClass: outsideClickIgnoreClass,\n        fixedHeight: _this.props.fixedHeight,\n        monthsShown: _this.props.monthsShown,\n        monthSelectedIn: _this.state.monthSelectedIn,\n        onDropdownFocus: _this.handleDropdownFocus,\n        onMonthChange: _this.props.onMonthChange,\n        onYearChange: _this.props.onYearChange,\n        dayClassName: _this.props.dayClassName,\n        weekDayClassName: _this.props.weekDayClassName,\n        monthClassName: _this.props.monthClassName,\n        timeClassName: _this.props.timeClassName,\n        showDateSelect: _this.props.showDateSelect,\n        showTimeSelect: _this.props.showTimeSelect,\n        showTimeSelectOnly: _this.props.showTimeSelectOnly,\n        onTimeChange: _this.handleTimeChange,\n        timeFormat: _this.props.timeFormat,\n        timeIntervals: _this.props.timeIntervals,\n        minTime: _this.props.minTime,\n        maxTime: _this.props.maxTime,\n        excludeTimes: _this.props.excludeTimes,\n        filterTime: _this.props.filterTime,\n        timeCaption: _this.props.timeCaption,\n        className: _this.props.calendarClassName,\n        container: _this.props.calendarContainer,\n        yearItemNumber: _this.props.yearItemNumber,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber,\n        previousMonthAriaLabel: _this.props.previousMonthAriaLabel,\n        previousMonthButtonLabel: _this.props.previousMonthButtonLabel,\n        nextMonthAriaLabel: _this.props.nextMonthAriaLabel,\n        nextMonthButtonLabel: _this.props.nextMonthButtonLabel,\n        previousYearAriaLabel: _this.props.previousYearAriaLabel,\n        previousYearButtonLabel: _this.props.previousYearButtonLabel,\n        nextYearAriaLabel: _this.props.nextYearAriaLabel,\n        nextYearButtonLabel: _this.props.nextYearButtonLabel,\n        timeInputLabel: _this.props.timeInputLabel,\n        disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n        renderCustomHeader: _this.props.renderCustomHeader,\n        popperProps: _this.props.popperProps,\n        renderDayContents: _this.props.renderDayContents,\n        renderMonthContent: _this.props.renderMonthContent,\n        renderQuarterContent: _this.props.renderQuarterContent,\n        renderYearContent: _this.props.renderYearContent,\n        onDayMouseEnter: _this.props.onDayMouseEnter,\n        onMonthMouseLeave: _this.props.onMonthMouseLeave,\n        onYearMouseEnter: _this.props.onYearMouseEnter,\n        onYearMouseLeave: _this.props.onYearMouseLeave,\n        selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n        showTimeInput: _this.props.showTimeInput,\n        showMonthYearPicker: _this.props.showMonthYearPicker,\n        showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n        showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n        showYearPicker: _this.props.showYearPicker,\n        showQuarterYearPicker: _this.props.showQuarterYearPicker,\n        showWeekPicker: _this.props.showWeekPicker,\n        excludeScrollbar: _this.props.excludeScrollbar,\n        handleOnKeyDown: _this.props.onKeyDown,\n        handleOnDayKeyDown: _this.onDayKeyDown,\n        isInputFocused: _this.state.focused,\n        customTimeInput: _this.props.customTimeInput,\n        setPreSelection: _this.setPreSelection,\n        usePointerEvent: _this.props.usePointerEvent,\n        yearClassName: _this.props.yearClassName\n      }, _this.props.children);\n    });\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\n      var _this$props3 = _this.props,\n        dateFormat = _this$props3.dateFormat,\n        locale = _this$props3.locale;\n      var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\n      var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\n      var ariaLiveMessage;\n      if (_this.props.selectsRange) {\n        ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\n          dateFormat: longDateFormat,\n          locale: locale\n        }), \". \").concat(_this.props.endDate ? \"End date: \" + safeDateFormat(_this.props.endDate, {\n          dateFormat: longDateFormat,\n          locale: locale\n        }) : \"\");\n      } else {\n        if (_this.props.showTimeSelectOnly) {\n          ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: dateFormat,\n            locale: locale\n          }));\n        } else if (_this.props.showYearPicker) {\n          ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"yyyy\",\n            locale: locale\n          }));\n        } else if (_this.props.showMonthYearPicker) {\n          ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"MMMM yyyy\",\n            locale: locale\n          }));\n        } else if (_this.props.showQuarterYearPicker) {\n          ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"yyyy, QQQ\",\n            locale: locale\n          }));\n        } else {\n          ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: longDateFormat,\n            locale: locale\n          }));\n        }\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        role: \"alert\",\n        \"aria-live\": \"polite\",\n        className: \"react-datepicker__aria-live\"\n      }, ariaLiveMessage);\n    });\n    _defineProperty(_this, \"renderDateInput\", function () {\n      var _React$cloneElement;\n      var className = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(_this.props.className, _defineProperty({}, outsideClickIgnoreClass, _this.state.open));\n      var customInput = _this.props.customInput || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        type: \"text\"\n      });\n      var customInputRef = _this.props.customInputRef || \"ref\";\n      var inputValue = typeof _this.props.value === \"string\" ? _this.props.value : typeof _this.state.inputValue === \"string\" ? _this.state.inputValue : _this.props.selectsRange ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, _this.props) : _this.props.selectsMultiple ? safeMultipleDatesFormat(_this.props.selectedDates, _this.props) : safeDateFormat(_this.props.selected, _this.props);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customInput, (_React$cloneElement = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, customInputRef, function (input) {\n        _this.input = input;\n      }), \"value\", inputValue), \"onBlur\", _this.handleBlur), \"onChange\", _this.handleChange), \"onClick\", _this.onInputClick), \"onFocus\", _this.handleFocus), \"onKeyDown\", _this.onInputKeyDown), \"id\", _this.props.id), \"name\", _this.props.name), \"form\", _this.props.form), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"autoFocus\", _this.props.autoFocus), \"placeholder\", _this.props.placeholderText), \"disabled\", _this.props.disabled), \"autoComplete\", _this.props.autoComplete), \"className\", (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(customInput.props.className, className)), \"title\", _this.props.title), \"readOnly\", _this.props.readOnly), \"required\", _this.props.required), \"tabIndex\", _this.props.tabIndex), \"aria-describedby\", _this.props.ariaDescribedBy), _defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"aria-invalid\", _this.props.ariaInvalid), \"aria-labelledby\", _this.props.ariaLabelledBy), \"aria-required\", _this.props.ariaRequired)));\n    });\n    _defineProperty(_this, \"renderClearButton\", function () {\n      var _this$props4 = _this.props,\n        isClearable = _this$props4.isClearable,\n        disabled = _this$props4.disabled,\n        selected = _this$props4.selected,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate,\n        clearButtonTitle = _this$props4.clearButtonTitle,\n        _this$props4$clearBut = _this$props4.clearButtonClassName,\n        clearButtonClassName = _this$props4$clearBut === void 0 ? \"\" : _this$props4$clearBut,\n        _this$props4$ariaLabe = _this$props4.ariaLabelClose,\n        ariaLabelClose = _this$props4$ariaLabe === void 0 ? \"Close\" : _this$props4$ariaLabe,\n        selectedDates = _this$props4.selectedDates;\n      if (isClearable && (selected != null || startDate != null || endDate != null || selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n          type: \"button\",\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, {\n            \"react-datepicker__close-icon--disabled\": disabled\n          }),\n          disabled: disabled,\n          \"aria-label\": ariaLabelClose,\n          onClick: _this.onClearClick,\n          title: clearButtonTitle,\n          tabIndex: -1\n        });\n      } else {\n        return null;\n      }\n    });\n    _this.state = _this.calcInitialState();\n    _this.preventFocusTimeout = null;\n    return _this;\n  }\n  _inherits(DatePicker, _React$Component);\n  return _createClass(DatePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"scroll\", this.onScroll, true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.inline && hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\n        this.setPreSelection(this.props.selected);\n      }\n      if (this.state.monthSelectedIn !== undefined && prevProps.monthsShown !== this.props.monthsShown) {\n        this.setState({\n          monthSelectedIn: 0\n        });\n      }\n      if (prevProps.highlightDates !== this.props.highlightDates) {\n        this.setState({\n          highlightDates: getHightLightDaysMap(this.props.highlightDates)\n        });\n      }\n      if (!prevState.focused && !isEqual(prevProps.selected, this.props.selected)) {\n        this.setState({\n          inputValue: null\n        });\n      }\n      if (prevState.open !== this.state.open) {\n        if (prevState.open === false && this.state.open === true) {\n          this.props.onCalendarOpen();\n        }\n        if (prevState.open === true && this.state.open === false) {\n          this.props.onCalendarClose();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearPreventFocusTimeout();\n      window.removeEventListener(\"scroll\", this.onScroll, true);\n    }\n  }, {\n    key: \"renderInputContainer\",\n    value: function renderInputContainer() {\n      var _this$props5 = this.props,\n        showIcon = _this$props5.showIcon,\n        icon = _this$props5.icon,\n        calendarIconClassname = _this$props5.calendarIconClassname,\n        toggleCalendarOnIconClick = _this$props5.toggleCalendarOnIconClick;\n      var open = this.state.open;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\")\n      }, showIcon && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CalendarIcon$1, _extends({\n        icon: icon,\n        className: \"\".concat(calendarIconClassname, \" \").concat(open && \"react-datepicker-ignore-onclickoutside\")\n      }, toggleCalendarOnIconClick ? {\n        onClick: this.toggleCalendar\n      } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var calendar = this.renderCalendar();\n      if (this.props.inline) return calendar;\n      if (this.props.withPortal) {\n        var portalContainer = this.state.open ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n          enableTabLoop: this.props.enableTabLoop\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__portal\",\n          tabIndex: -1,\n          onKeyDown: this.onPortalKeyDown\n        }, calendar)) : null;\n        if (this.state.open && this.props.portalId) {\n          portalContainer = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n            portalId: this.props.portalId,\n            portalHost: this.props.portalHost\n          }, portalContainer);\n        }\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, this.renderInputContainer(), portalContainer);\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PopperComponent$1, {\n        className: this.props.popperClassName,\n        wrapperClassName: this.props.wrapperClassName,\n        hidePopper: !this.isCalendarOpen(),\n        portalId: this.props.portalId,\n        portalHost: this.props.portalHost,\n        popperModifiers: this.props.popperModifiers,\n        targetComponent: this.renderInputContainer(),\n        popperContainer: this.props.popperContainer,\n        popperComponent: calendar,\n        popperPlacement: this.props.popperPlacement,\n        popperProps: this.props.popperProps,\n        popperOnKeyDown: this.onPopperKeyDown,\n        enableTabLoop: this.props.enableTabLoop,\n        showArrow: this.props.showPopperArrow\n      });\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        allowSameDay: false,\n        dateFormat: \"MM/dd/yyyy\",\n        dateFormatCalendar: \"LLLL yyyy\",\n        onChange: function onChange() {},\n        disabled: false,\n        disabledKeyboardNavigation: false,\n        dropdownMode: \"scroll\",\n        onFocus: function onFocus() {},\n        onBlur: function onBlur() {},\n        onKeyDown: function onKeyDown() {},\n        onInputClick: function onInputClick() {},\n        onSelect: function onSelect() {},\n        onClickOutside: function onClickOutside() {},\n        onMonthChange: function onMonthChange() {},\n        onCalendarOpen: function onCalendarOpen() {},\n        onCalendarClose: function onCalendarClose() {},\n        preventOpenOnFocus: false,\n        onYearChange: function onYearChange() {},\n        onInputError: function onInputError() {},\n        monthsShown: 1,\n        readOnly: false,\n        withPortal: false,\n        selectsDisabledDaysInRange: false,\n        shouldCloseOnSelect: true,\n        showTimeSelect: false,\n        showTimeInput: false,\n        showPreviousMonths: false,\n        showMonthYearPicker: false,\n        showFullMonthYearPicker: false,\n        showTwoColumnMonthYearPicker: false,\n        showFourColumnMonthYearPicker: false,\n        showYearPicker: false,\n        showQuarterYearPicker: false,\n        showWeekPicker: false,\n        strictParsing: false,\n        swapRange: false,\n        timeIntervals: 30,\n        timeCaption: \"Time\",\n        previousMonthAriaLabel: \"Previous Month\",\n        previousMonthButtonLabel: \"Previous Month\",\n        nextMonthAriaLabel: \"Next Month\",\n        nextMonthButtonLabel: \"Next Month\",\n        previousYearAriaLabel: \"Previous Year\",\n        previousYearButtonLabel: \"Previous Year\",\n        nextYearAriaLabel: \"Next Year\",\n        nextYearButtonLabel: \"Next Year\",\n        timeInputLabel: \"Time\",\n        enableTabLoop: true,\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n        focusSelectedMonth: false,\n        showPopperArrow: true,\n        excludeScrollbar: true,\n        customTimeInput: null,\n        calendarStartDay: undefined,\n        toggleCalendarOnIconClick: false,\n        usePointerEvent: false\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c9ebeb17ff28\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHdhLW5leHRqcy1hcHAvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzPzVlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJjOWViZWIxN2ZmMjhcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ })

};
;